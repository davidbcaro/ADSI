/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.dao;

import co.edu.sena.dto.*;
import co.edu.sena.exceptions.*;

public interface ActivityDao
{
	/** 
	 * Inserts a new row in the activity table.
	 */
	public ActivityPk insert(Activity dto) throws ActivityDaoException;

	/** 
	 * Updates a single row in the activity table.
	 */
	public void update(ActivityPk pk, Activity dto) throws ActivityDaoException;

	/** 
	 * Deletes a single row in the activity table.
	 */
	public void delete(ActivityPk pk) throws ActivityDaoException;

	/** 
	 * Returns the rows from the activity table that matches the specified primary-key value.
	 */
	public Activity findByPrimaryKey(ActivityPk pk) throws ActivityDaoException;

	/** 
	 * Returns all rows from the activity table that match the criteria 'id_Activity = :idActivity AND name_phase = :namePhase AND Code = :code'.
	 */
	public Activity findByPrimaryKey(int idActivity, String namePhase, String code) throws ActivityDaoException;

	/** 
	 * Returns all rows from the activity table that match the criteria ''.
	 */
	public Activity[] findAll() throws ActivityDaoException;

	/** 
	 * Returns all rows from the activity table that match the criteria 'name_phase = :namePhase AND Code = :code'.
	 */
	public Activity[] findByPhase(String namePhase, String code) throws ActivityDaoException;

	/** 
	 * Returns all rows from the activity table that match the criteria 'id_Activity = :idActivity'.
	 */
	public Activity[] findWhereIdActivityEquals(int idActivity) throws ActivityDaoException;

	/** 
	 * Returns all rows from the activity table that match the criteria 'Name = :name'.
	 */
	public Activity[] findWhereNameEquals(String name) throws ActivityDaoException;

	/** 
	 * Returns all rows from the activity table that match the criteria 'Code = :code'.
	 */
	public Activity[] findWhereCodeEquals(String code) throws ActivityDaoException;

	/** 
	 * Returns all rows from the activity table that match the criteria 'name_phase = :namePhase'.
	 */
	public Activity[] findWhereNamePhaseEquals(String namePhase) throws ActivityDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the activity table that match the specified arbitrary SQL statement
	 */
	public Activity[] findByDynamicSelect(String sql, Object[] sqlParams) throws ActivityDaoException;

	/** 
	 * Returns all rows from the activity table that match the specified arbitrary SQL statement
	 */
	public Activity[] findByDynamicWhere(String sql, Object[] sqlParams) throws ActivityDaoException;

}
