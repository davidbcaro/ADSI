/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.jdbc;

import co.edu.sena.dao.*;
import co.edu.sena.factory.*;
import co.edu.sena.dto.*;
import co.edu.sena.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class MailServerDaoImpl extends AbstractDAO implements MailServerDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT Mail, Password, smtp_Host, smtp_Port, smtp_Start_tls_enable, smtp_Auth, recovery_Case, message_Recovery FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( Mail, Password, smtp_Host, smtp_Port, smtp_Start_tls_enable, smtp_Auth, recovery_Case, message_Recovery ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET Mail = ?, Password = ?, smtp_Host = ?, smtp_Port = ?, smtp_Start_tls_enable = ?, smtp_Auth = ?, recovery_Case = ?, message_Recovery = ? WHERE Mail = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE Mail = ?";

	/** 
	 * Index of column Mail
	 */
	protected static final int COLUMN_MAIL = 1;

	/** 
	 * Index of column Password
	 */
	protected static final int COLUMN_PASSWORD = 2;

	/** 
	 * Index of column smtp_Host
	 */
	protected static final int COLUMN_SMTP_HOST = 3;

	/** 
	 * Index of column smtp_Port
	 */
	protected static final int COLUMN_SMTP_PORT = 4;

	/** 
	 * Index of column smtp_Start_tls_enable
	 */
	protected static final int COLUMN_SMTP_START_TLS_ENABLE = 5;

	/** 
	 * Index of column smtp_Auth
	 */
	protected static final int COLUMN_SMTP_AUTH = 6;

	/** 
	 * Index of column recovery_Case
	 */
	protected static final int COLUMN_RECOVERY_CASE = 7;

	/** 
	 * Index of column message_Recovery
	 */
	protected static final int COLUMN_MESSAGE_RECOVERY = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column Mail
	 */
	protected static final int PK_COLUMN_MAIL = 1;

	/** 
	 * Inserts a new row in the mail_server table.
	 */
	public MailServerPk insert(MailServer dto) throws MailServerDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setInt( index++, dto.getMail() );
			stmt.setString( index++, dto.getPassword() );
			stmt.setString( index++, dto.getSmtpHost() );
			if (dto.isSmtpPortNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getSmtpPort() );
			}
		
			if (dto.isSmtpStartTlsEnableNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getSmtpStartTlsEnable() );
			}
		
			if (dto.isSmtpAuthNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getSmtpAuth() );
			}
		
			stmt.setString( index++, dto.getRecoveryCase() );
			stmt.setString( index++, dto.getMessageRecovery() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MailServerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the mail_server table.
	 */
	public void update(MailServerPk pk, MailServer dto) throws MailServerDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getMail() );
			stmt.setString( index++, dto.getPassword() );
			stmt.setString( index++, dto.getSmtpHost() );
			if (dto.isSmtpPortNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getSmtpPort() );
			}
		
			if (dto.isSmtpStartTlsEnableNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getSmtpStartTlsEnable() );
			}
		
			if (dto.isSmtpAuthNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getSmtpAuth() );
			}
		
			stmt.setString( index++, dto.getRecoveryCase() );
			stmt.setString( index++, dto.getMessageRecovery() );
			stmt.setInt( 9, pk.getMail() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MailServerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the mail_server table.
	 */
	public void delete(MailServerPk pk) throws MailServerDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getMail() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MailServerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the mail_server table that matches the specified primary-key value.
	 */
	public MailServer findByPrimaryKey(MailServerPk pk) throws MailServerDaoException
	{
		return findByPrimaryKey( pk.getMail() );
	}

	/** 
	 * Returns all rows from the mail_server table that match the criteria 'Mail = :mail'.
	 */
	public MailServer findByPrimaryKey(int mail) throws MailServerDaoException
	{
		MailServer ret[] = findByDynamicSelect( SQL_SELECT + " WHERE Mail = ?", new Object[] {  new Integer(mail) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the mail_server table that match the criteria ''.
	 */
	public MailServer[] findAll() throws MailServerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY Mail", null );
	}

	/** 
	 * Returns all rows from the mail_server table that match the criteria 'Mail = :mail'.
	 */
	public MailServer[] findWhereMailEquals(int mail) throws MailServerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Mail = ? ORDER BY Mail", new Object[] {  new Integer(mail) } );
	}

	/** 
	 * Returns all rows from the mail_server table that match the criteria 'Password = :password'.
	 */
	public MailServer[] findWherePasswordEquals(String password) throws MailServerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Password = ? ORDER BY Password", new Object[] { password } );
	}

	/** 
	 * Returns all rows from the mail_server table that match the criteria 'smtp_Host = :smtpHost'.
	 */
	public MailServer[] findWhereSmtpHostEquals(String smtpHost) throws MailServerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE smtp_Host = ? ORDER BY smtp_Host", new Object[] { smtpHost } );
	}

	/** 
	 * Returns all rows from the mail_server table that match the criteria 'smtp_Port = :smtpPort'.
	 */
	public MailServer[] findWhereSmtpPortEquals(int smtpPort) throws MailServerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE smtp_Port = ? ORDER BY smtp_Port", new Object[] {  new Integer(smtpPort) } );
	}

	/** 
	 * Returns all rows from the mail_server table that match the criteria 'smtp_Start_tls_enable = :smtpStartTlsEnable'.
	 */
	public MailServer[] findWhereSmtpStartTlsEnableEquals(short smtpStartTlsEnable) throws MailServerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE smtp_Start_tls_enable = ? ORDER BY smtp_Start_tls_enable", new Object[] {  new Short(smtpStartTlsEnable) } );
	}

	/** 
	 * Returns all rows from the mail_server table that match the criteria 'smtp_Auth = :smtpAuth'.
	 */
	public MailServer[] findWhereSmtpAuthEquals(short smtpAuth) throws MailServerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE smtp_Auth = ? ORDER BY smtp_Auth", new Object[] {  new Short(smtpAuth) } );
	}

	/** 
	 * Returns all rows from the mail_server table that match the criteria 'recovery_Case = :recoveryCase'.
	 */
	public MailServer[] findWhereRecoveryCaseEquals(String recoveryCase) throws MailServerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE recovery_Case = ? ORDER BY recovery_Case", new Object[] { recoveryCase } );
	}

	/** 
	 * Returns all rows from the mail_server table that match the criteria 'message_Recovery = :messageRecovery'.
	 */
	public MailServer[] findWhereMessageRecoveryEquals(String messageRecovery) throws MailServerDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE message_Recovery = ? ORDER BY message_Recovery", new Object[] { messageRecovery } );
	}

	/**
	 * Method 'MailServerDaoImpl'
	 * 
	 */
	public MailServerDaoImpl()
	{
	}

	/**
	 * Method 'MailServerDaoImpl'
	 * 
	 * @param userConn
	 */
	public MailServerDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "eon.mail_server";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected MailServer fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			MailServer dto = new MailServer();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected MailServer[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			MailServer dto = new MailServer();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		MailServer ret[] = new MailServer[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(MailServer dto, ResultSet rs) throws SQLException
	{
		dto.setMail( rs.getInt( COLUMN_MAIL ) );
		dto.setPassword( rs.getString( COLUMN_PASSWORD ) );
		dto.setSmtpHost( rs.getString( COLUMN_SMTP_HOST ) );
		dto.setSmtpPort( rs.getInt( COLUMN_SMTP_PORT ) );
		if (rs.wasNull()) {
			dto.setSmtpPortNull( true );
		}
		
		dto.setSmtpStartTlsEnable( rs.getShort( COLUMN_SMTP_START_TLS_ENABLE ) );
		if (rs.wasNull()) {
			dto.setSmtpStartTlsEnableNull( true );
		}
		
		dto.setSmtpAuth( rs.getShort( COLUMN_SMTP_AUTH ) );
		if (rs.wasNull()) {
			dto.setSmtpAuthNull( true );
		}
		
		dto.setRecoveryCase( rs.getString( COLUMN_RECOVERY_CASE ) );
		dto.setMessageRecovery( rs.getString( COLUMN_MESSAGE_RECOVERY ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(MailServer dto)
	{
	}

	/** 
	 * Returns all rows from the mail_server table that match the specified arbitrary SQL statement
	 */
	public MailServer[] findByDynamicSelect(String sql, Object[] sqlParams) throws MailServerDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MailServerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the mail_server table that match the specified arbitrary SQL statement
	 */
	public MailServer[] findByDynamicWhere(String sql, Object[] sqlParams) throws MailServerDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MailServerDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
