/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.jdbc;

import co.edu.sena.dao.*;
import co.edu.sena.factory.*;
import co.edu.sena.dto.*;
import co.edu.sena.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class LearningResultDaoImpl extends AbstractDAO implements LearningResultDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT Code, Description, Program_Code, Competition_Code, Version FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( Code, Description, Program_Code, Competition_Code, Version ) VALUES ( ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET Code = ?, Description = ?, Program_Code = ?, Competition_Code = ?, Version = ? WHERE Code = ? AND Program_Code = ? AND Version = ? AND Competition_Code = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE Code = ? AND Program_Code = ? AND Version = ? AND Competition_Code = ?";

	/** 
	 * Index of column Code
	 */
	protected static final int COLUMN_CODE = 1;

	/** 
	 * Index of column Description
	 */
	protected static final int COLUMN_DESCRIPTION = 2;

	/** 
	 * Index of column Program_Code
	 */
	protected static final int COLUMN_PROGRAM_CODE = 3;

	/** 
	 * Index of column Competition_Code
	 */
	protected static final int COLUMN_COMPETITION_CODE = 4;

	/** 
	 * Index of column Version
	 */
	protected static final int COLUMN_VERSION = 5;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/** 
	 * Index of primary-key column Code
	 */
	protected static final int PK_COLUMN_CODE = 1;

	/** 
	 * Index of primary-key column Program_Code
	 */
	protected static final int PK_COLUMN_PROGRAM_CODE = 2;

	/** 
	 * Index of primary-key column Version
	 */
	protected static final int PK_COLUMN_VERSION = 3;

	/** 
	 * Index of primary-key column Competition_Code
	 */
	protected static final int PK_COLUMN_COMPETITION_CODE = 4;

	/** 
	 * Inserts a new row in the learning_result table.
	 */
	public LearningResultPk insert(LearningResult dto) throws LearningResultDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getCode() );
			stmt.setString( index++, dto.getDescription() );
			stmt.setString( index++, dto.getProgramCode() );
			stmt.setString( index++, dto.getCompetitionCode() );
			stmt.setString( index++, dto.getVersion() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LearningResultDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the learning_result table.
	 */
	public void update(LearningResultPk pk, LearningResult dto) throws LearningResultDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getCode() );
			stmt.setString( index++, dto.getDescription() );
			stmt.setString( index++, dto.getProgramCode() );
			stmt.setString( index++, dto.getCompetitionCode() );
			stmt.setString( index++, dto.getVersion() );
			stmt.setString( 6, pk.getCode() );
			stmt.setString( 7, pk.getProgramCode() );
			stmt.setString( 8, pk.getVersion() );
			stmt.setString( 9, pk.getCompetitionCode() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LearningResultDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the learning_result table.
	 */
	public void delete(LearningResultPk pk) throws LearningResultDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getCode() );
			stmt.setString( 2, pk.getProgramCode() );
			stmt.setString( 3, pk.getVersion() );
			stmt.setString( 4, pk.getCompetitionCode() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LearningResultDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the learning_result table that matches the specified primary-key value.
	 */
	public LearningResult findByPrimaryKey(LearningResultPk pk) throws LearningResultDaoException
	{
		return findByPrimaryKey( pk.getCode(), pk.getProgramCode(), pk.getVersion(), pk.getCompetitionCode() );
	}

	/** 
	 * Returns all rows from the learning_result table that match the criteria 'Code = :code AND Program_Code = :programCode AND Version = :version AND Competition_Code = :competitionCode'.
	 */
	public LearningResult findByPrimaryKey(String code, String programCode, String version, String competitionCode) throws LearningResultDaoException
	{
		LearningResult ret[] = findByDynamicSelect( SQL_SELECT + " WHERE Code = ? AND Program_Code = ? AND Version = ? AND Competition_Code = ?", new Object[] { code, programCode, version, competitionCode } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the learning_result table that match the criteria ''.
	 */
	public LearningResult[] findAll() throws LearningResultDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY Code, Program_Code, Version, Competition_Code", null );
	}

	/** 
	 * Returns all rows from the learning_result table that match the criteria 'Competition_Code = :competitionCode AND Program_Code = :programCode AND Version = :version'.
	 */
	public LearningResult[] findByCompetition(String competitionCode, String programCode, String version) throws LearningResultDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Competition_Code = ? AND Program_Code = ? AND Version = ?", new Object[] { competitionCode, programCode, version } );
	}

	/** 
	 * Returns all rows from the learning_result table that match the criteria 'Code = :code'.
	 */
	public LearningResult[] findWhereCodeEquals(String code) throws LearningResultDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Code = ? ORDER BY Code", new Object[] { code } );
	}

	/** 
	 * Returns all rows from the learning_result table that match the criteria 'Description = :description'.
	 */
	public LearningResult[] findWhereDescriptionEquals(String description) throws LearningResultDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Description = ? ORDER BY Description", new Object[] { description } );
	}

	/** 
	 * Returns all rows from the learning_result table that match the criteria 'Program_Code = :programCode'.
	 */
	public LearningResult[] findWhereProgramCodeEquals(String programCode) throws LearningResultDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Program_Code = ? ORDER BY Program_Code", new Object[] { programCode } );
	}

	/** 
	 * Returns all rows from the learning_result table that match the criteria 'Competition_Code = :competitionCode'.
	 */
	public LearningResult[] findWhereCompetitionCodeEquals(String competitionCode) throws LearningResultDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Competition_Code = ? ORDER BY Competition_Code", new Object[] { competitionCode } );
	}

	/** 
	 * Returns all rows from the learning_result table that match the criteria 'Version = :version'.
	 */
	public LearningResult[] findWhereVersionEquals(String version) throws LearningResultDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Version = ? ORDER BY Version", new Object[] { version } );
	}

	/**
	 * Method 'LearningResultDaoImpl'
	 * 
	 */
	public LearningResultDaoImpl()
	{
	}

	/**
	 * Method 'LearningResultDaoImpl'
	 * 
	 * @param userConn
	 */
	public LearningResultDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "eon.learning_result";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected LearningResult fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			LearningResult dto = new LearningResult();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected LearningResult[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			LearningResult dto = new LearningResult();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		LearningResult ret[] = new LearningResult[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(LearningResult dto, ResultSet rs) throws SQLException
	{
		dto.setCode( rs.getString( COLUMN_CODE ) );
		dto.setDescription( rs.getString( COLUMN_DESCRIPTION ) );
		dto.setProgramCode( rs.getString( COLUMN_PROGRAM_CODE ) );
		dto.setCompetitionCode( rs.getString( COLUMN_COMPETITION_CODE ) );
		dto.setVersion( rs.getString( COLUMN_VERSION ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(LearningResult dto)
	{
	}

	/** 
	 * Returns all rows from the learning_result table that match the specified arbitrary SQL statement
	 */
	public LearningResult[] findByDynamicSelect(String sql, Object[] sqlParams) throws LearningResultDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LearningResultDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the learning_result table that match the specified arbitrary SQL statement
	 */
	public LearningResult[] findByDynamicWhere(String sql, Object[] sqlParams) throws LearningResultDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LearningResultDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
