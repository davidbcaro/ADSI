/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.dao;

import co.edu.sena.dto.*;
import co.edu.sena.exceptions.*;

public interface ScheduleDao
{
	/** 
	 * Inserts a new row in the schedule table.
	 */
	public SchedulePk insert(Schedule dto) throws ScheduleDaoException;

	/** 
	 * Updates a single row in the schedule table.
	 */
	public void update(SchedulePk pk, Schedule dto) throws ScheduleDaoException;

	/** 
	 * Deletes a single row in the schedule table.
	 */
	public void delete(SchedulePk pk) throws ScheduleDaoException;

	/** 
	 * Returns the rows from the schedule table that matches the specified primary-key value.
	 */
	public Schedule findByPrimaryKey(SchedulePk pk) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'document_Number = :documentNumber AND id_Document = :idDocument AND name_Day = :nameDay AND number_Ambience = :numberAmbience AND name_Headquarters = :nameHeadquarters AND number_Ficha = :numberFicha AND quarter_Name = :quarterName AND acronyms_Working_Day = :acronymsWorkingDay AND idVersion = :idVersion AND idCurrent_Quarter = :idcurrentQuarter'.
	 */
	public Schedule findByPrimaryKey(String documentNumber, String idDocument, String nameDay, String numberAmbience, String nameHeadquarters, String numberFicha, String quarterName, String acronymsWorkingDay, int idVersion, String idcurrentQuarter) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria ''.
	 */
	public Schedule[] findAll() throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_Headquarters = :nameHeadquarters AND number_Ambience = :numberAmbience'.
	 */
	public Schedule[] findByAmbience(String nameHeadquarters, String numberAmbience) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_Day = :nameDay'.
	 */
	public Schedule[] findByDay(String nameDay) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'number_Ficha = :numberFicha AND quarter_Name = :quarterName AND acronyms_Working_Day = :acronymsWorkingDay'.
	 */
	public Schedule[] findByFichaHasTrimester(String numberFicha, String quarterName, String acronymsWorkingDay) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'document_Number = :documentNumber AND id_Document = :idDocument'.
	 */
	public Schedule[] findByInstructor(String documentNumber, String idDocument) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'modality_Name = :modalityName'.
	 */
	public Schedule[] findByModality(String modalityName) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'idCurrent_Quarter = :idcurrentQuarter AND idVersion = :idVersion'.
	 */
	public Schedule[] findByVersion(String idcurrentQuarter, int idVersion) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'document_Number = :documentNumber'.
	 */
	public Schedule[] findWhereDocumentNumberEquals(String documentNumber) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'id_Document = :idDocument'.
	 */
	public Schedule[] findWhereIdDocumentEquals(String idDocument) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'start_Time = :startTime'.
	 */
	public Schedule[] findWhereStartTimeEquals(String startTime) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'end_Time = :endTime'.
	 */
	public Schedule[] findWhereEndTimeEquals(String endTime) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_Day = :nameDay'.
	 */
	public Schedule[] findWhereNameDayEquals(String nameDay) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'modality_Name = :modalityName'.
	 */
	public Schedule[] findWhereModalityNameEquals(String modalityName) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'number_Ambience = :numberAmbience'.
	 */
	public Schedule[] findWhereNumberAmbienceEquals(String numberAmbience) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_Headquarters = :nameHeadquarters'.
	 */
	public Schedule[] findWhereNameHeadquartersEquals(String nameHeadquarters) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'number_Ficha = :numberFicha'.
	 */
	public Schedule[] findWhereNumberFichaEquals(String numberFicha) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'quarter_Name = :quarterName'.
	 */
	public Schedule[] findWhereQuarterNameEquals(String quarterName) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'acronyms_Working_Day = :acronymsWorkingDay'.
	 */
	public Schedule[] findWhereAcronymsWorkingDayEquals(String acronymsWorkingDay) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'idVersion = :idVersion'.
	 */
	public Schedule[] findWhereIdVersionEquals(int idVersion) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'idCurrent_Quarter = :idcurrentQuarter'.
	 */
	public Schedule[] findWhereIdcurrentQuarterEquals(String idcurrentQuarter) throws ScheduleDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the schedule table that match the specified arbitrary SQL statement
	 */
	public Schedule[] findByDynamicSelect(String sql, Object[] sqlParams) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the specified arbitrary SQL statement
	 */
	public Schedule[] findByDynamicWhere(String sql, Object[] sqlParams) throws ScheduleDaoException;

}
