/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.dao;

import co.edu.sena.dto.*;
import co.edu.sena.exceptions.*;

public interface TrainingLevelDao
{
	/** 
	 * Inserts a new row in the training_level table.
	 */
	public TrainingLevelPk insert(TrainingLevel dto) throws TrainingLevelDaoException;

	/** 
	 * Updates a single row in the training_level table.
	 */
	public void update(TrainingLevelPk pk, TrainingLevel dto) throws TrainingLevelDaoException;

	/** 
	 * Deletes a single row in the training_level table.
	 */
	public void delete(TrainingLevelPk pk) throws TrainingLevelDaoException;

	/** 
	 * Returns the rows from the training_level table that matches the specified primary-key value.
	 */
	public TrainingLevel findByPrimaryKey(TrainingLevelPk pk) throws TrainingLevelDaoException;

	/** 
	 * Returns all rows from the training_level table that match the criteria 'training_Level = :trainingLevel'.
	 */
	public TrainingLevel findByPrimaryKey(String trainingLevel) throws TrainingLevelDaoException;

	/** 
	 * Returns all rows from the training_level table that match the criteria ''.
	 */
	public TrainingLevel[] findAll() throws TrainingLevelDaoException;

	/** 
	 * Returns all rows from the training_level table that match the criteria 'training_Level = :trainingLevel'.
	 */
	public TrainingLevel[] findWhereTrainingLevelEquals(String trainingLevel) throws TrainingLevelDaoException;

	/** 
	 * Returns all rows from the training_level table that match the criteria 'State = :state'.
	 */
	public TrainingLevel[] findWhereStateEquals(int state) throws TrainingLevelDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the training_level table that match the specified arbitrary SQL statement
	 */
	public TrainingLevel[] findByDynamicSelect(String sql, Object[] sqlParams) throws TrainingLevelDaoException;

	/** 
	 * Returns all rows from the training_level table that match the specified arbitrary SQL statement
	 */
	public TrainingLevel[] findByDynamicWhere(String sql, Object[] sqlParams) throws TrainingLevelDaoException;

}
