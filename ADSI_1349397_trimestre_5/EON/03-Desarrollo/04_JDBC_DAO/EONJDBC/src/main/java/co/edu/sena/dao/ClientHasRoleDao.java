/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.dao;

import co.edu.sena.dto.*;
import co.edu.sena.exceptions.*;

public interface ClientHasRoleDao
{
	/** 
	 * Inserts a new row in the client_has_role table.
	 */
	public ClientHasRolePk insert(ClientHasRole dto) throws ClientHasRoleDaoException;

	/** 
	 * Updates a single row in the client_has_role table.
	 */
	public void update(ClientHasRolePk pk, ClientHasRole dto) throws ClientHasRoleDaoException;

	/** 
	 * Deletes a single row in the client_has_role table.
	 */
	public void delete(ClientHasRolePk pk) throws ClientHasRoleDaoException;

	/** 
	 * Returns the rows from the client_has_role table that matches the specified primary-key value.
	 */
	public ClientHasRole findByPrimaryKey(ClientHasRolePk pk) throws ClientHasRoleDaoException;

	/** 
	 * Returns all rows from the client_has_role table that match the criteria 'document_Number = :documentNumber AND id_Document = :idDocument AND id_Role = :idRole'.
	 */
	public ClientHasRole findByPrimaryKey(String documentNumber, String idDocument, String idRole) throws ClientHasRoleDaoException;

	/** 
	 * Returns all rows from the client_has_role table that match the criteria ''.
	 */
	public ClientHasRole[] findAll() throws ClientHasRoleDaoException;

	/** 
	 * Returns all rows from the client_has_role table that match the criteria 'document_Number = :documentNumber AND id_Document = :idDocument'.
	 */
	public ClientHasRole[] findByClient(String documentNumber, String idDocument) throws ClientHasRoleDaoException;

	/** 
	 * Returns all rows from the client_has_role table that match the criteria 'id_Role = :idRole'.
	 */
	public ClientHasRole[] findByRole(String idRole) throws ClientHasRoleDaoException;

	/** 
	 * Returns all rows from the client_has_role table that match the criteria 'document_Number = :documentNumber'.
	 */
	public ClientHasRole[] findWhereDocumentNumberEquals(String documentNumber) throws ClientHasRoleDaoException;

	/** 
	 * Returns all rows from the client_has_role table that match the criteria 'id_Document = :idDocument'.
	 */
	public ClientHasRole[] findWhereIdDocumentEquals(String idDocument) throws ClientHasRoleDaoException;

	/** 
	 * Returns all rows from the client_has_role table that match the criteria 'id_Role = :idRole'.
	 */
	public ClientHasRole[] findWhereIdRoleEquals(String idRole) throws ClientHasRoleDaoException;

	/** 
	 * Returns all rows from the client_has_role table that match the criteria 'Status = :status'.
	 */
	public ClientHasRole[] findWhereStatusEquals(short status) throws ClientHasRoleDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the client_has_role table that match the specified arbitrary SQL statement
	 */
	public ClientHasRole[] findByDynamicSelect(String sql, Object[] sqlParams) throws ClientHasRoleDaoException;

	/** 
	 * Returns all rows from the client_has_role table that match the specified arbitrary SQL statement
	 */
	public ClientHasRole[] findByDynamicWhere(String sql, Object[] sqlParams) throws ClientHasRoleDaoException;

}
