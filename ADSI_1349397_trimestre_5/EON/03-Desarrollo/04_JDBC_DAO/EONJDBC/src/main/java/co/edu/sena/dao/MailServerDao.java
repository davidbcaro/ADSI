/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.dao;

import co.edu.sena.dto.*;
import co.edu.sena.exceptions.*;

public interface MailServerDao
{
	/** 
	 * Inserts a new row in the mail_server table.
	 */
	public MailServerPk insert(MailServer dto) throws MailServerDaoException;

	/** 
	 * Updates a single row in the mail_server table.
	 */
	public void update(MailServerPk pk, MailServer dto) throws MailServerDaoException;

	/** 
	 * Deletes a single row in the mail_server table.
	 */
	public void delete(MailServerPk pk) throws MailServerDaoException;

	/** 
	 * Returns the rows from the mail_server table that matches the specified primary-key value.
	 */
	public MailServer findByPrimaryKey(MailServerPk pk) throws MailServerDaoException;

	/** 
	 * Returns all rows from the mail_server table that match the criteria 'Mail = :mail'.
	 */
	public MailServer findByPrimaryKey(int mail) throws MailServerDaoException;

	/** 
	 * Returns all rows from the mail_server table that match the criteria ''.
	 */
	public MailServer[] findAll() throws MailServerDaoException;

	/** 
	 * Returns all rows from the mail_server table that match the criteria 'Mail = :mail'.
	 */
	public MailServer[] findWhereMailEquals(int mail) throws MailServerDaoException;

	/** 
	 * Returns all rows from the mail_server table that match the criteria 'Password = :password'.
	 */
	public MailServer[] findWherePasswordEquals(String password) throws MailServerDaoException;

	/** 
	 * Returns all rows from the mail_server table that match the criteria 'smtp_Host = :smtpHost'.
	 */
	public MailServer[] findWhereSmtpHostEquals(String smtpHost) throws MailServerDaoException;

	/** 
	 * Returns all rows from the mail_server table that match the criteria 'smtp_Port = :smtpPort'.
	 */
	public MailServer[] findWhereSmtpPortEquals(int smtpPort) throws MailServerDaoException;

	/** 
	 * Returns all rows from the mail_server table that match the criteria 'smtp_Start_tls_enable = :smtpStartTlsEnable'.
	 */
	public MailServer[] findWhereSmtpStartTlsEnableEquals(short smtpStartTlsEnable) throws MailServerDaoException;

	/** 
	 * Returns all rows from the mail_server table that match the criteria 'smtp_Auth = :smtpAuth'.
	 */
	public MailServer[] findWhereSmtpAuthEquals(short smtpAuth) throws MailServerDaoException;

	/** 
	 * Returns all rows from the mail_server table that match the criteria 'recovery_Case = :recoveryCase'.
	 */
	public MailServer[] findWhereRecoveryCaseEquals(String recoveryCase) throws MailServerDaoException;

	/** 
	 * Returns all rows from the mail_server table that match the criteria 'message_Recovery = :messageRecovery'.
	 */
	public MailServer[] findWhereMessageRecoveryEquals(String messageRecovery) throws MailServerDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the mail_server table that match the specified arbitrary SQL statement
	 */
	public MailServer[] findByDynamicSelect(String sql, Object[] sqlParams) throws MailServerDaoException;

	/** 
	 * Returns all rows from the mail_server table that match the specified arbitrary SQL statement
	 */
	public MailServer[] findByDynamicWhere(String sql, Object[] sqlParams) throws MailServerDaoException;

}
