/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.jdbc;

import co.edu.sena.dao.*;
import co.edu.sena.factory.*;
import co.edu.sena.dto.*;
import co.edu.sena.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class TrimesterHasLearningResultDaoImpl extends AbstractDAO implements TrimesterHasLearningResultDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT quarter_Name, acronyms_Working_Day, Learning_Result_Code, Program_Code, Competition_Code, speciality_Name, Version FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( quarter_Name, acronyms_Working_Day, Learning_Result_Code, Program_Code, Competition_Code, speciality_Name, Version ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET quarter_Name = ?, acronyms_Working_Day = ?, Learning_Result_Code = ?, Program_Code = ?, Competition_Code = ?, speciality_Name = ?, Version = ? WHERE quarter_Name = ? AND acronyms_Working_Day = ? AND speciality_Name = ? AND Learning_Result_Code = ? AND Program_Code = ? AND Competition_Code = ? AND Version = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE quarter_Name = ? AND acronyms_Working_Day = ? AND speciality_Name = ? AND Learning_Result_Code = ? AND Program_Code = ? AND Competition_Code = ? AND Version = ?";

	/** 
	 * Index of column quarter_Name
	 */
	protected static final int COLUMN_QUARTER_NAME = 1;

	/** 
	 * Index of column acronyms_Working_Day
	 */
	protected static final int COLUMN_ACRONYMS_WORKING_DAY = 2;

	/** 
	 * Index of column Learning_Result_Code
	 */
	protected static final int COLUMN_LEARNING_RESULT_CODE = 3;

	/** 
	 * Index of column Program_Code
	 */
	protected static final int COLUMN_PROGRAM_CODE = 4;

	/** 
	 * Index of column Competition_Code
	 */
	protected static final int COLUMN_COMPETITION_CODE = 5;

	/** 
	 * Index of column speciality_Name
	 */
	protected static final int COLUMN_SPECIALITY_NAME = 6;

	/** 
	 * Index of column Version
	 */
	protected static final int COLUMN_VERSION = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column quarter_Name
	 */
	protected static final int PK_COLUMN_QUARTER_NAME = 1;

	/** 
	 * Index of primary-key column acronyms_Working_Day
	 */
	protected static final int PK_COLUMN_ACRONYMS_WORKING_DAY = 2;

	/** 
	 * Index of primary-key column speciality_Name
	 */
	protected static final int PK_COLUMN_SPECIALITY_NAME = 3;

	/** 
	 * Index of primary-key column Learning_Result_Code
	 */
	protected static final int PK_COLUMN_LEARNING_RESULT_CODE = 4;

	/** 
	 * Index of primary-key column Program_Code
	 */
	protected static final int PK_COLUMN_PROGRAM_CODE = 5;

	/** 
	 * Index of primary-key column Competition_Code
	 */
	protected static final int PK_COLUMN_COMPETITION_CODE = 6;

	/** 
	 * Index of primary-key column Version
	 */
	protected static final int PK_COLUMN_VERSION = 7;

	/** 
	 * Inserts a new row in the trimester_has_learning_result table.
	 */
	public TrimesterHasLearningResultPk insert(TrimesterHasLearningResult dto) throws TrimesterHasLearningResultDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getQuarterName() );
			stmt.setString( index++, dto.getAcronymsWorkingDay() );
			stmt.setString( index++, dto.getLearningResultCode() );
			stmt.setString( index++, dto.getProgramCode() );
			stmt.setString( index++, dto.getCompetitionCode() );
			stmt.setString( index++, dto.getSpecialityName() );
			stmt.setString( index++, dto.getVersion() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TrimesterHasLearningResultDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the trimester_has_learning_result table.
	 */
	public void update(TrimesterHasLearningResultPk pk, TrimesterHasLearningResult dto) throws TrimesterHasLearningResultDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getQuarterName() );
			stmt.setString( index++, dto.getAcronymsWorkingDay() );
			stmt.setString( index++, dto.getLearningResultCode() );
			stmt.setString( index++, dto.getProgramCode() );
			stmt.setString( index++, dto.getCompetitionCode() );
			stmt.setString( index++, dto.getSpecialityName() );
			stmt.setString( index++, dto.getVersion() );
			stmt.setString( 8, pk.getQuarterName() );
			stmt.setString( 9, pk.getAcronymsWorkingDay() );
			stmt.setString( 10, pk.getSpecialityName() );
			stmt.setString( 11, pk.getLearningResultCode() );
			stmt.setString( 12, pk.getProgramCode() );
			stmt.setString( 13, pk.getCompetitionCode() );
			stmt.setString( 14, pk.getVersion() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TrimesterHasLearningResultDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the trimester_has_learning_result table.
	 */
	public void delete(TrimesterHasLearningResultPk pk) throws TrimesterHasLearningResultDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getQuarterName() );
			stmt.setString( 2, pk.getAcronymsWorkingDay() );
			stmt.setString( 3, pk.getSpecialityName() );
			stmt.setString( 4, pk.getLearningResultCode() );
			stmt.setString( 5, pk.getProgramCode() );
			stmt.setString( 6, pk.getCompetitionCode() );
			stmt.setString( 7, pk.getVersion() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TrimesterHasLearningResultDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the trimester_has_learning_result table that matches the specified primary-key value.
	 */
	public TrimesterHasLearningResult findByPrimaryKey(TrimesterHasLearningResultPk pk) throws TrimesterHasLearningResultDaoException
	{
		return findByPrimaryKey( pk.getQuarterName(), pk.getAcronymsWorkingDay(), pk.getSpecialityName(), pk.getLearningResultCode(), pk.getProgramCode(), pk.getCompetitionCode(), pk.getVersion() );
	}

	/** 
	 * Returns all rows from the trimester_has_learning_result table that match the criteria 'quarter_Name = :quarterName AND acronyms_Working_Day = :acronymsWorkingDay AND speciality_Name = :specialityName AND Learning_Result_Code = :learningResultCode AND Program_Code = :programCode AND Competition_Code = :competitionCode AND Version = :version'.
	 */
	public TrimesterHasLearningResult findByPrimaryKey(String quarterName, String acronymsWorkingDay, String specialityName, String learningResultCode, String programCode, String competitionCode, String version) throws TrimesterHasLearningResultDaoException
	{
		TrimesterHasLearningResult ret[] = findByDynamicSelect( SQL_SELECT + " WHERE quarter_Name = ? AND acronyms_Working_Day = ? AND speciality_Name = ? AND Learning_Result_Code = ? AND Program_Code = ? AND Competition_Code = ? AND Version = ?", new Object[] { quarterName, acronymsWorkingDay, specialityName, learningResultCode, programCode, competitionCode, version } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the trimester_has_learning_result table that match the criteria ''.
	 */
	public TrimesterHasLearningResult[] findAll() throws TrimesterHasLearningResultDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY quarter_Name, acronyms_Working_Day, speciality_Name, Learning_Result_Code, Program_Code, Competition_Code, Version", null );
	}

	/** 
	 * Returns all rows from the trimester_has_learning_result table that match the criteria 'Learning_Result_Code = :learningResultCode AND Program_Code = :programCode AND Version = :version AND Competition_Code = :competitionCode'.
	 */
	public TrimesterHasLearningResult[] findByLearningResult(String learningResultCode, String programCode, String version, String competitionCode) throws TrimesterHasLearningResultDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Learning_Result_Code = ? AND Program_Code = ? AND Version = ? AND Competition_Code = ?", new Object[] { learningResultCode, programCode, version, competitionCode } );
	}

	/** 
	 * Returns all rows from the trimester_has_learning_result table that match the criteria 'quarter_Name = :quarterName AND acronyms_Working_Day = :acronymsWorkingDay AND speciality_Name = :specialityName'.
	 */
	public TrimesterHasLearningResult[] findByTrimester(String quarterName, String acronymsWorkingDay, String specialityName) throws TrimesterHasLearningResultDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE quarter_Name = ? AND acronyms_Working_Day = ? AND speciality_Name = ?", new Object[] { quarterName, acronymsWorkingDay, specialityName } );
	}

	/** 
	 * Returns all rows from the trimester_has_learning_result table that match the criteria 'quarter_Name = :quarterName'.
	 */
	public TrimesterHasLearningResult[] findWhereQuarterNameEquals(String quarterName) throws TrimesterHasLearningResultDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE quarter_Name = ? ORDER BY quarter_Name", new Object[] { quarterName } );
	}

	/** 
	 * Returns all rows from the trimester_has_learning_result table that match the criteria 'acronyms_Working_Day = :acronymsWorkingDay'.
	 */
	public TrimesterHasLearningResult[] findWhereAcronymsWorkingDayEquals(String acronymsWorkingDay) throws TrimesterHasLearningResultDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE acronyms_Working_Day = ? ORDER BY acronyms_Working_Day", new Object[] { acronymsWorkingDay } );
	}

	/** 
	 * Returns all rows from the trimester_has_learning_result table that match the criteria 'Learning_Result_Code = :learningResultCode'.
	 */
	public TrimesterHasLearningResult[] findWhereLearningResultCodeEquals(String learningResultCode) throws TrimesterHasLearningResultDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Learning_Result_Code = ? ORDER BY Learning_Result_Code", new Object[] { learningResultCode } );
	}

	/** 
	 * Returns all rows from the trimester_has_learning_result table that match the criteria 'Program_Code = :programCode'.
	 */
	public TrimesterHasLearningResult[] findWhereProgramCodeEquals(String programCode) throws TrimesterHasLearningResultDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Program_Code = ? ORDER BY Program_Code", new Object[] { programCode } );
	}

	/** 
	 * Returns all rows from the trimester_has_learning_result table that match the criteria 'Competition_Code = :competitionCode'.
	 */
	public TrimesterHasLearningResult[] findWhereCompetitionCodeEquals(String competitionCode) throws TrimesterHasLearningResultDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Competition_Code = ? ORDER BY Competition_Code", new Object[] { competitionCode } );
	}

	/** 
	 * Returns all rows from the trimester_has_learning_result table that match the criteria 'speciality_Name = :specialityName'.
	 */
	public TrimesterHasLearningResult[] findWhereSpecialityNameEquals(String specialityName) throws TrimesterHasLearningResultDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE speciality_Name = ? ORDER BY speciality_Name", new Object[] { specialityName } );
	}

	/** 
	 * Returns all rows from the trimester_has_learning_result table that match the criteria 'Version = :version'.
	 */
	public TrimesterHasLearningResult[] findWhereVersionEquals(String version) throws TrimesterHasLearningResultDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Version = ? ORDER BY Version", new Object[] { version } );
	}

	/**
	 * Method 'TrimesterHasLearningResultDaoImpl'
	 * 
	 */
	public TrimesterHasLearningResultDaoImpl()
	{
	}

	/**
	 * Method 'TrimesterHasLearningResultDaoImpl'
	 * 
	 * @param userConn
	 */
	public TrimesterHasLearningResultDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "eon.trimester_has_learning_result";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected TrimesterHasLearningResult fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			TrimesterHasLearningResult dto = new TrimesterHasLearningResult();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected TrimesterHasLearningResult[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			TrimesterHasLearningResult dto = new TrimesterHasLearningResult();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		TrimesterHasLearningResult ret[] = new TrimesterHasLearningResult[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(TrimesterHasLearningResult dto, ResultSet rs) throws SQLException
	{
		dto.setQuarterName( rs.getString( COLUMN_QUARTER_NAME ) );
		dto.setAcronymsWorkingDay( rs.getString( COLUMN_ACRONYMS_WORKING_DAY ) );
		dto.setLearningResultCode( rs.getString( COLUMN_LEARNING_RESULT_CODE ) );
		dto.setProgramCode( rs.getString( COLUMN_PROGRAM_CODE ) );
		dto.setCompetitionCode( rs.getString( COLUMN_COMPETITION_CODE ) );
		dto.setSpecialityName( rs.getString( COLUMN_SPECIALITY_NAME ) );
		dto.setVersion( rs.getString( COLUMN_VERSION ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(TrimesterHasLearningResult dto)
	{
	}

	/** 
	 * Returns all rows from the trimester_has_learning_result table that match the specified arbitrary SQL statement
	 */
	public TrimesterHasLearningResult[] findByDynamicSelect(String sql, Object[] sqlParams) throws TrimesterHasLearningResultDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TrimesterHasLearningResultDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the trimester_has_learning_result table that match the specified arbitrary SQL statement
	 */
	public TrimesterHasLearningResult[] findByDynamicWhere(String sql, Object[] sqlParams) throws TrimesterHasLearningResultDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TrimesterHasLearningResultDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
