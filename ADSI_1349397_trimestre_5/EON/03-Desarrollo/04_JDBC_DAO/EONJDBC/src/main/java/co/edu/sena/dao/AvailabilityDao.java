/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.dao;

import java.util.Date;
import co.edu.sena.dto.*;
import co.edu.sena.exceptions.*;

public interface AvailabilityDao
{
	/** 
	 * Inserts a new row in the availability table.
	 */
	public AvailabilityPk insert(Availability dto) throws AvailabilityDaoException;

	/** 
	 * Updates a single row in the availability table.
	 */
	public void update(AvailabilityPk pk, Availability dto) throws AvailabilityDaoException;

	/** 
	 * Deletes a single row in the availability table.
	 */
	public void delete(AvailabilityPk pk) throws AvailabilityDaoException;

	/** 
	 * Returns the rows from the availability table that matches the specified primary-key value.
	 */
	public Availability findByPrimaryKey(AvailabilityPk pk) throws AvailabilityDaoException;

	/** 
	 * Returns all rows from the availability table that match the criteria 'document_Number = :documentNumber AND id_Document = :idDocument AND start_Time = :startTime AND acronyms_Working_Day = :acronymsWorkingDay AND name_Day = :nameDay'.
	 */
	public Availability findByPrimaryKey(String documentNumber, String idDocument, Date startTime, String acronymsWorkingDay, String nameDay) throws AvailabilityDaoException;

	/** 
	 * Returns all rows from the availability table that match the criteria ''.
	 */
	public Availability[] findAll() throws AvailabilityDaoException;

	/** 
	 * Returns all rows from the availability table that match the criteria 'name_Day = :nameDay'.
	 */
	public Availability[] findByDay(String nameDay) throws AvailabilityDaoException;

	/** 
	 * Returns all rows from the availability table that match the criteria 'document_Number = :documentNumber AND id_Document = :idDocument'.
	 */
	public Availability[] findByInstructor(String documentNumber, String idDocument) throws AvailabilityDaoException;

	/** 
	 * Returns all rows from the availability table that match the criteria 'acronyms_Working_Day = :acronymsWorkingDay'.
	 */
	public Availability[] findByWorkingDay(String acronymsWorkingDay) throws AvailabilityDaoException;

	/** 
	 * Returns all rows from the availability table that match the criteria 'document_Number = :documentNumber'.
	 */
	public Availability[] findWhereDocumentNumberEquals(String documentNumber) throws AvailabilityDaoException;

	/** 
	 * Returns all rows from the availability table that match the criteria 'id_Document = :idDocument'.
	 */
	public Availability[] findWhereIdDocumentEquals(String idDocument) throws AvailabilityDaoException;

	/** 
	 * Returns all rows from the availability table that match the criteria 'start_Time = :startTime'.
	 */
	public Availability[] findWhereStartTimeEquals(Date startTime) throws AvailabilityDaoException;

	/** 
	 * Returns all rows from the availability table that match the criteria 'end_Time = :endTime'.
	 */
	public Availability[] findWhereEndTimeEquals(Date endTime) throws AvailabilityDaoException;

	/** 
	 * Returns all rows from the availability table that match the criteria 'acronyms_Working_Day = :acronymsWorkingDay'.
	 */
	public Availability[] findWhereAcronymsWorkingDayEquals(String acronymsWorkingDay) throws AvailabilityDaoException;

	/** 
	 * Returns all rows from the availability table that match the criteria 'name_Day = :nameDay'.
	 */
	public Availability[] findWhereNameDayEquals(String nameDay) throws AvailabilityDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the availability table that match the specified arbitrary SQL statement
	 */
	public Availability[] findByDynamicSelect(String sql, Object[] sqlParams) throws AvailabilityDaoException;

	/** 
	 * Returns all rows from the availability table that match the specified arbitrary SQL statement
	 */
	public Availability[] findByDynamicWhere(String sql, Object[] sqlParams) throws AvailabilityDaoException;

}
