/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.tidsplan.dao;

import java.util.Date;
import co.edu.sena.tidsplan.dto.*;
import co.edu.sena.tidsplan.exceptions.*;

public interface GroupDao
{
	/** 
	 * Inserts a new row in the group table.
	 */
	public GroupPk insert(Group dto) throws GroupDaoException;

	/** 
	 * Updates a single row in the group table.
	 */
	public void update(GroupPk pk, Group dto) throws GroupDaoException;

	/** 
	 * Deletes a single row in the group table.
	 */
	public void delete(GroupPk pk) throws GroupDaoException;

	/** 
	 * Returns the rows from the group table that matches the specified primary-key value.
	 */
	public Group findByPrimaryKey(GroupPk pk) throws GroupDaoException;

	/** 
	 * Returns all rows from the group table that match the criteria 'number_group = :numberGroup'.
	 */
	public Group findByPrimaryKey(String numberGroup) throws GroupDaoException;

	/** 
	 * Returns all rows from the group table that match the criteria ''.
	 */
	public Group[] findAll() throws GroupDaoException;

	/** 
	 * Returns all rows from the group table that match the criteria 'name_state = :nameState'.
	 */
	public Group[] findByStateGroup(String nameState) throws GroupDaoException;

	/** 
	 * Returns all rows from the group table that match the criteria 'program_code = :programCode AND version = :version'.
	 */
	public Group[] findByTrainingProgram(String programCode, String version) throws GroupDaoException;

	/** 
	 * Returns all rows from the group table that match the criteria 'number_group = :numberGroup'.
	 */
	public Group[] findWhereNumberGroupEquals(String numberGroup) throws GroupDaoException;

	/** 
	 * Returns all rows from the group table that match the criteria 'start_date = :startDate'.
	 */
	public Group[] findWhereStartDateEquals(Date startDate) throws GroupDaoException;

	/** 
	 * Returns all rows from the group table that match the criteria 'end_date = :endDate'.
	 */
	public Group[] findWhereEndDateEquals(Date endDate) throws GroupDaoException;

	/** 
	 * Returns all rows from the group table that match the criteria 'route = :route'.
	 */
	public Group[] findWhereRouteEquals(String route) throws GroupDaoException;

	/** 
	 * Returns all rows from the group table that match the criteria 'name_state = :nameState'.
	 */
	public Group[] findWhereNameStateEquals(String nameState) throws GroupDaoException;

	/** 
	 * Returns all rows from the group table that match the criteria 'version = :version'.
	 */
	public Group[] findWhereVersionEquals(String version) throws GroupDaoException;

	/** 
	 * Returns all rows from the group table that match the criteria 'program_code = :programCode'.
	 */
	public Group[] findWhereProgramCodeEquals(String programCode) throws GroupDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the group table that match the specified arbitrary SQL statement
	 */
	public Group[] findByDynamicSelect(String sql, Object[] sqlParams) throws GroupDaoException;

	/** 
	 * Returns all rows from the group table that match the specified arbitrary SQL statement
	 */
	public Group[] findByDynamicWhere(String sql, Object[] sqlParams) throws GroupDaoException;

}
