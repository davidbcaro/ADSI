/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.tidsplan.jdbc;

import co.edu.sena.tidsplan.dao.*;
import co.edu.sena.tidsplan.factory.*;
import java.util.Date;
import co.edu.sena.tidsplan.dto.*;
import co.edu.sena.tidsplan.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class GroupDaoImpl extends AbstractDAO implements GroupDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT number_group, start_date, end_date, route, name_state, version, program_code FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( number_group, start_date, end_date, route, name_state, version, program_code ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET number_group = ?, start_date = ?, end_date = ?, route = ?, name_state = ?, version = ?, program_code = ? WHERE number_group = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE number_group = ?";

	/** 
	 * Index of column number_group
	 */
	protected static final int COLUMN_NUMBER_GROUP = 1;

	/** 
	 * Index of column start_date
	 */
	protected static final int COLUMN_START_DATE = 2;

	/** 
	 * Index of column end_date
	 */
	protected static final int COLUMN_END_DATE = 3;

	/** 
	 * Index of column route
	 */
	protected static final int COLUMN_ROUTE = 4;

	/** 
	 * Index of column name_state
	 */
	protected static final int COLUMN_NAME_STATE = 5;

	/** 
	 * Index of column version
	 */
	protected static final int COLUMN_VERSION = 6;

	/** 
	 * Index of column program_code
	 */
	protected static final int COLUMN_PROGRAM_CODE = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column number_group
	 */
	protected static final int PK_COLUMN_NUMBER_GROUP = 1;

	/** 
	 * Inserts a new row in the group table.
	 */
	public GroupPk insert(Group dto) throws GroupDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getNumberGroup() );
			stmt.setDate(index++, dto.getStartDate()==null ? null : new java.sql.Date( dto.getStartDate().getTime() ) );
			stmt.setDate(index++, dto.getEndDate()==null ? null : new java.sql.Date( dto.getEndDate().getTime() ) );
			stmt.setString( index++, dto.getRoute() );
			stmt.setString( index++, dto.getNameState() );
			stmt.setString( index++, dto.getVersion() );
			stmt.setString( index++, dto.getProgramCode() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GroupDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the group table.
	 */
	public void update(GroupPk pk, Group dto) throws GroupDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getNumberGroup() );
			stmt.setDate(index++, dto.getStartDate()==null ? null : new java.sql.Date( dto.getStartDate().getTime() ) );
			stmt.setDate(index++, dto.getEndDate()==null ? null : new java.sql.Date( dto.getEndDate().getTime() ) );
			stmt.setString( index++, dto.getRoute() );
			stmt.setString( index++, dto.getNameState() );
			stmt.setString( index++, dto.getVersion() );
			stmt.setString( index++, dto.getProgramCode() );
			stmt.setString( 8, pk.getNumberGroup() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GroupDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the group table.
	 */
	public void delete(GroupPk pk) throws GroupDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getNumberGroup() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GroupDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the group table that matches the specified primary-key value.
	 */
	public Group findByPrimaryKey(GroupPk pk) throws GroupDaoException
	{
		return findByPrimaryKey( pk.getNumberGroup() );
	}

	/** 
	 * Returns all rows from the group table that match the criteria 'number_group = :numberGroup'.
	 */
	public Group findByPrimaryKey(String numberGroup) throws GroupDaoException
	{
		Group ret[] = findByDynamicSelect( SQL_SELECT + " WHERE number_group = ?", new Object[] { numberGroup } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the group table that match the criteria ''.
	 */
	public Group[] findAll() throws GroupDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY number_group", null );
	}

	/** 
	 * Returns all rows from the group table that match the criteria 'name_state = :nameState'.
	 */
	public Group[] findByStateGroup(String nameState) throws GroupDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name_state = ?", new Object[] { nameState } );
	}

	/** 
	 * Returns all rows from the group table that match the criteria 'program_code = :programCode AND version = :version'.
	 */
	public Group[] findByTrainingProgram(String programCode, String version) throws GroupDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE program_code = ? AND version = ?", new Object[] { programCode, version } );
	}

	/** 
	 * Returns all rows from the group table that match the criteria 'number_group = :numberGroup'.
	 */
	public Group[] findWhereNumberGroupEquals(String numberGroup) throws GroupDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE number_group = ? ORDER BY number_group", new Object[] { numberGroup } );
	}

	/** 
	 * Returns all rows from the group table that match the criteria 'start_date = :startDate'.
	 */
	public Group[] findWhereStartDateEquals(Date startDate) throws GroupDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE start_date = ? ORDER BY start_date", new Object[] { startDate==null ? null : new java.sql.Date( startDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the group table that match the criteria 'end_date = :endDate'.
	 */
	public Group[] findWhereEndDateEquals(Date endDate) throws GroupDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE end_date = ? ORDER BY end_date", new Object[] { endDate==null ? null : new java.sql.Date( endDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the group table that match the criteria 'route = :route'.
	 */
	public Group[] findWhereRouteEquals(String route) throws GroupDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE route = ? ORDER BY route", new Object[] { route } );
	}

	/** 
	 * Returns all rows from the group table that match the criteria 'name_state = :nameState'.
	 */
	public Group[] findWhereNameStateEquals(String nameState) throws GroupDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name_state = ? ORDER BY name_state", new Object[] { nameState } );
	}

	/** 
	 * Returns all rows from the group table that match the criteria 'version = :version'.
	 */
	public Group[] findWhereVersionEquals(String version) throws GroupDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE version = ? ORDER BY version", new Object[] { version } );
	}

	/** 
	 * Returns all rows from the group table that match the criteria 'program_code = :programCode'.
	 */
	public Group[] findWhereProgramCodeEquals(String programCode) throws GroupDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE program_code = ? ORDER BY program_code", new Object[] { programCode } );
	}

	/**
	 * Method 'GroupDaoImpl'
	 * 
	 */
	public GroupDaoImpl()
	{
	}

	/**
	 * Method 'GroupDaoImpl'
	 * 
	 * @param userConn
	 */
	public GroupDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "tidsplan.group";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Group fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Group dto = new Group();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Group[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Group dto = new Group();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Group ret[] = new Group[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Group dto, ResultSet rs) throws SQLException
	{
		dto.setNumberGroup( rs.getString( COLUMN_NUMBER_GROUP ) );
		dto.setStartDate( rs.getDate(COLUMN_START_DATE ) );
		dto.setEndDate( rs.getDate(COLUMN_END_DATE ) );
		dto.setRoute( rs.getString( COLUMN_ROUTE ) );
		dto.setNameState( rs.getString( COLUMN_NAME_STATE ) );
		dto.setVersion( rs.getString( COLUMN_VERSION ) );
		dto.setProgramCode( rs.getString( COLUMN_PROGRAM_CODE ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Group dto)
	{
	}

	/** 
	 * Returns all rows from the group table that match the specified arbitrary SQL statement
	 */
	public Group[] findByDynamicSelect(String sql, Object[] sqlParams) throws GroupDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GroupDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the group table that match the specified arbitrary SQL statement
	 */
	public Group[] findByDynamicWhere(String sql, Object[] sqlParams) throws GroupDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GroupDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
