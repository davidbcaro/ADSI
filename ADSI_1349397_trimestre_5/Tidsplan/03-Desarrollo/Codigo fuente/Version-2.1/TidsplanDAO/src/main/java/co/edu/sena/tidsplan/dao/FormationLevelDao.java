/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.tidsplan.dao;

import co.edu.sena.tidsplan.dto.*;
import co.edu.sena.tidsplan.exceptions.*;

public interface FormationLevelDao
{
	/** 
	 * Inserts a new row in the formation_level table.
	 */
	public FormationLevelPk insert(FormationLevel dto) throws FormationLevelDaoException;

	/** 
	 * Updates a single row in the formation_level table.
	 */
	public void update(FormationLevelPk pk, FormationLevel dto) throws FormationLevelDaoException;

	/** 
	 * Deletes a single row in the formation_level table.
	 */
	public void delete(FormationLevelPk pk) throws FormationLevelDaoException;

	/** 
	 * Returns the rows from the formation_level table that matches the specified primary-key value.
	 */
	public FormationLevel findByPrimaryKey(FormationLevelPk pk) throws FormationLevelDaoException;

	/** 
	 * Returns all rows from the formation_level table that match the criteria 'level_formation = :levelFormation'.
	 */
	public FormationLevel findByPrimaryKey(String levelFormation) throws FormationLevelDaoException;

	/** 
	 * Returns all rows from the formation_level table that match the criteria ''.
	 */
	public FormationLevel[] findAll() throws FormationLevelDaoException;

	/** 
	 * Returns all rows from the formation_level table that match the criteria 'level_formation = :levelFormation'.
	 */
	public FormationLevel[] findWhereLevelFormationEquals(String levelFormation) throws FormationLevelDaoException;

	/** 
	 * Returns all rows from the formation_level table that match the criteria 'status = :status'.
	 */
	public FormationLevel[] findWhereStatusEquals(short status) throws FormationLevelDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the formation_level table that match the specified arbitrary SQL statement
	 */
	public FormationLevel[] findByDynamicSelect(String sql, Object[] sqlParams) throws FormationLevelDaoException;

	/** 
	 * Returns all rows from the formation_level table that match the specified arbitrary SQL statement
	 */
	public FormationLevel[] findByDynamicWhere(String sql, Object[] sqlParams) throws FormationLevelDaoException;

}
