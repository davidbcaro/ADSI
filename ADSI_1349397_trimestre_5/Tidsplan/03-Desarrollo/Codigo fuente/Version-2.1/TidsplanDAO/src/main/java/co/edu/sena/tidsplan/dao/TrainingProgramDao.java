/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.tidsplan.dao;

import co.edu.sena.tidsplan.dto.*;
import co.edu.sena.tidsplan.exceptions.*;

public interface TrainingProgramDao
{
	/** 
	 * Inserts a new row in the training_program table.
	 */
	public TrainingProgramPk insert(TrainingProgram dto) throws TrainingProgramDaoException;

	/** 
	 * Updates a single row in the training_program table.
	 */
	public void update(TrainingProgramPk pk, TrainingProgram dto) throws TrainingProgramDaoException;

	/** 
	 * Deletes a single row in the training_program table.
	 */
	public void delete(TrainingProgramPk pk) throws TrainingProgramDaoException;

	/** 
	 * Returns the rows from the training_program table that matches the specified primary-key value.
	 */
	public TrainingProgram findByPrimaryKey(TrainingProgramPk pk) throws TrainingProgramDaoException;

	/** 
	 * Returns all rows from the training_program table that match the criteria 'id_code = :idCode AND version = :version'.
	 */
	public TrainingProgram findByPrimaryKey(String idCode, String version) throws TrainingProgramDaoException;

	/** 
	 * Returns all rows from the training_program table that match the criteria ''.
	 */
	public TrainingProgram[] findAll() throws TrainingProgramDaoException;

	/** 
	 * Returns all rows from the training_program table that match the criteria 'level_formation = :levelFormation'.
	 */
	public TrainingProgram[] findByFormationLevel(String levelFormation) throws TrainingProgramDaoException;

	/** 
	 * Returns all rows from the training_program table that match the criteria 'id_code = :idCode'.
	 */
	public TrainingProgram[] findWhereIdCodeEquals(String idCode) throws TrainingProgramDaoException;

	/** 
	 * Returns all rows from the training_program table that match the criteria 'name = :name'.
	 */
	public TrainingProgram[] findWhereNameEquals(String name) throws TrainingProgramDaoException;

	/** 
	 * Returns all rows from the training_program table that match the criteria 'version = :version'.
	 */
	public TrainingProgram[] findWhereVersionEquals(String version) throws TrainingProgramDaoException;

	/** 
	 * Returns all rows from the training_program table that match the criteria 'initials = :initials'.
	 */
	public TrainingProgram[] findWhereInitialsEquals(String initials) throws TrainingProgramDaoException;

	/** 
	 * Returns all rows from the training_program table that match the criteria 'status = :status'.
	 */
	public TrainingProgram[] findWhereStatusEquals(short status) throws TrainingProgramDaoException;

	/** 
	 * Returns all rows from the training_program table that match the criteria 'level_formation = :levelFormation'.
	 */
	public TrainingProgram[] findWhereLevelFormationEquals(String levelFormation) throws TrainingProgramDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the training_program table that match the specified arbitrary SQL statement
	 */
	public TrainingProgram[] findByDynamicSelect(String sql, Object[] sqlParams) throws TrainingProgramDaoException;

	/** 
	 * Returns all rows from the training_program table that match the specified arbitrary SQL statement
	 */
	public TrainingProgram[] findByDynamicWhere(String sql, Object[] sqlParams) throws TrainingProgramDaoException;

}
