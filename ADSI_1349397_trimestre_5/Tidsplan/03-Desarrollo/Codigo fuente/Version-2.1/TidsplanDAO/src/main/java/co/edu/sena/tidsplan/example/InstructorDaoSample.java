/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.tidsplan.example;

import java.math.*;
import java.util.Date;
import java.util.Collection;
import co.edu.sena.tidsplan.dao.InstructorDao;
import co.edu.sena.tidsplan.dto.Instructor;
import co.edu.sena.tidsplan.exceptions.InstructorDaoException;
import co.edu.sena.tidsplan.factory.InstructorDaoFactory;

public class InstructorDaoSample
{
	/**
	 * Method 'main'
	 * 
	 * @param arg
	 * @throws Exception
	 */
	public static void main(String[] arg) throws Exception
	{
		// Uncomment one of the lines below to test the generated code
		
		 findAll();
		// findByCustomer("", "");
		// findByEmploymentRelationship("");
		// findBySpeciality("");
		// findWhereDocumentEquals("");
		// findWhereDocumentNumberEquals("");
		// findWhereTypeEmploymentRelationshipEquals("");
		// findWhereNameSpecialityEquals("");
	}

	/**
	 * Method 'findAll'
	 * 
	 */
	public static void findAll()
	{
		try {
			InstructorDao _dao = getInstructorDao();
			Instructor _result[] = _dao.findAll();
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findByCustomer'
	 * 
	 * @param documentNumber
	 * @param document
	 */
	public static void findByCustomer(String documentNumber, String document)
	{
		try {
			InstructorDao _dao = getInstructorDao();
			Instructor _result[] = _dao.findByCustomer(documentNumber, document);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findByEmploymentRelationship'
	 * 
	 * @param typeEmploymentRelationship
	 */
	public static void findByEmploymentRelationship(String typeEmploymentRelationship)
	{
		try {
			InstructorDao _dao = getInstructorDao();
			Instructor _result[] = _dao.findByEmploymentRelationship(typeEmploymentRelationship);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findBySpeciality'
	 * 
	 * @param nameSpeciality
	 */
	public static void findBySpeciality(String nameSpeciality)
	{
		try {
			InstructorDao _dao = getInstructorDao();
			Instructor _result[] = _dao.findBySpeciality(nameSpeciality);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereDocumentEquals'
	 * 
	 * @param document
	 */
	public static void findWhereDocumentEquals(String document)
	{
		try {
			InstructorDao _dao = getInstructorDao();
			Instructor _result[] = _dao.findWhereDocumentEquals(document);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereDocumentNumberEquals'
	 * 
	 * @param documentNumber
	 */
	public static void findWhereDocumentNumberEquals(String documentNumber)
	{
		try {
			InstructorDao _dao = getInstructorDao();
			Instructor _result[] = _dao.findWhereDocumentNumberEquals(documentNumber);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereTypeEmploymentRelationshipEquals'
	 * 
	 * @param typeEmploymentRelationship
	 */
	public static void findWhereTypeEmploymentRelationshipEquals(String typeEmploymentRelationship)
	{
		try {
			InstructorDao _dao = getInstructorDao();
			Instructor _result[] = _dao.findWhereTypeEmploymentRelationshipEquals(typeEmploymentRelationship);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereNameSpecialityEquals'
	 * 
	 * @param nameSpeciality
	 */
	public static void findWhereNameSpecialityEquals(String nameSpeciality)
	{
		try {
			InstructorDao _dao = getInstructorDao();
			Instructor _result[] = _dao.findWhereNameSpecialityEquals(nameSpeciality);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'getInstructorDao'
	 * 
	 * @return InstructorDao
	 */
	public static InstructorDao getInstructorDao()
	{
		return InstructorDaoFactory.create();
	}

	/**
	 * Method 'display'
	 * 
	 * @param dto
	 */
	public static void display(Instructor dto)
	{
		StringBuffer buf = new StringBuffer();
		buf.append( dto.getDocument() );
		buf.append( ", " );
		buf.append( dto.getDocumentNumber() );
		buf.append( ", " );
		buf.append( dto.getTypeEmploymentRelationship() );
		buf.append( ", " );
		buf.append( dto.getNameSpeciality() );
		System.out.println( buf.toString() );
	}

}
