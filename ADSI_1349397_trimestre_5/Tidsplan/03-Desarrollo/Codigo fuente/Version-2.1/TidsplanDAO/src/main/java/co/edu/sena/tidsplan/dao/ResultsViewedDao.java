/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.tidsplan.dao;

import co.edu.sena.tidsplan.dto.*;
import co.edu.sena.tidsplan.exceptions.*;

public interface ResultsViewedDao
{
	/** 
	 * Inserts a new row in the results_viewed table.
	 */
	public ResultsViewedPk insert(ResultsViewed dto) throws ResultsViewedDaoException;

	/** 
	 * Updates a single row in the results_viewed table.
	 */
	public void update(ResultsViewedPk pk, ResultsViewed dto) throws ResultsViewedDaoException;

	/** 
	 * Deletes a single row in the results_viewed table.
	 */
	public void delete(ResultsViewedPk pk) throws ResultsViewedDaoException;

	/** 
	 * Returns the rows from the results_viewed table that matches the specified primary-key value.
	 */
	public ResultsViewed findByPrimaryKey(ResultsViewedPk pk) throws ResultsViewedDaoException;

	/** 
	 * Returns all rows from the results_viewed table that match the criteria 'number_group = :numberGroup AND name_trimester = :nameTrimester AND workingday_initials = :workingdayInitials AND lr_code = :lrCode AND program_code = :programCode AND competition_code = :competitionCode AND level_formation = :levelFormation AND program_version = :programVersion'.
	 */
	public ResultsViewed findByPrimaryKey(String numberGroup, String nameTrimester, String workingdayInitials, String lrCode, String programCode, String competitionCode, String levelFormation, String programVersion) throws ResultsViewedDaoException;

	/** 
	 * Returns all rows from the results_viewed table that match the criteria ''.
	 */
	public ResultsViewed[] findAll() throws ResultsViewedDaoException;

	/** 
	 * Returns all rows from the results_viewed table that match the criteria 'number_group = :numberGroup AND name_trimester = :nameTrimester AND workingday_initials = :workingdayInitials AND level_formation = :levelFormation'.
	 */
	public ResultsViewed[] findByGroupHasTrimester(String numberGroup, String nameTrimester, String workingdayInitials, String levelFormation) throws ResultsViewedDaoException;

	/** 
	 * Returns all rows from the results_viewed table that match the criteria 'lr_code = :lrCode AND program_code = :programCode AND competition_code = :competitionCode AND program_version = :programVersion'.
	 */
	public ResultsViewed[] findByLearningResult(String lrCode, String programCode, String competitionCode, String programVersion) throws ResultsViewedDaoException;

	/** 
	 * Returns all rows from the results_viewed table that match the criteria 'name_trimester = :nameTrimester'.
	 */
	public ResultsViewed[] findWhereNameTrimesterEquals(String nameTrimester) throws ResultsViewedDaoException;

	/** 
	 * Returns all rows from the results_viewed table that match the criteria 'workingday_initials = :workingdayInitials'.
	 */
	public ResultsViewed[] findWhereWorkingdayInitialsEquals(String workingdayInitials) throws ResultsViewedDaoException;

	/** 
	 * Returns all rows from the results_viewed table that match the criteria 'lr_code = :lrCode'.
	 */
	public ResultsViewed[] findWhereLrCodeEquals(String lrCode) throws ResultsViewedDaoException;

	/** 
	 * Returns all rows from the results_viewed table that match the criteria 'program_code = :programCode'.
	 */
	public ResultsViewed[] findWhereProgramCodeEquals(String programCode) throws ResultsViewedDaoException;

	/** 
	 * Returns all rows from the results_viewed table that match the criteria 'competition_code = :competitionCode'.
	 */
	public ResultsViewed[] findWhereCompetitionCodeEquals(String competitionCode) throws ResultsViewedDaoException;

	/** 
	 * Returns all rows from the results_viewed table that match the criteria 'level_formation = :levelFormation'.
	 */
	public ResultsViewed[] findWhereLevelFormationEquals(String levelFormation) throws ResultsViewedDaoException;

	/** 
	 * Returns all rows from the results_viewed table that match the criteria 'program_version = :programVersion'.
	 */
	public ResultsViewed[] findWhereProgramVersionEquals(String programVersion) throws ResultsViewedDaoException;

	/** 
	 * Returns all rows from the results_viewed table that match the criteria 'number_group = :numberGroup'.
	 */
	public ResultsViewed[] findWhereNumberGroupEquals(String numberGroup) throws ResultsViewedDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the results_viewed table that match the specified arbitrary SQL statement
	 */
	public ResultsViewed[] findByDynamicSelect(String sql, Object[] sqlParams) throws ResultsViewedDaoException;

	/** 
	 * Returns all rows from the results_viewed table that match the specified arbitrary SQL statement
	 */
	public ResultsViewed[] findByDynamicWhere(String sql, Object[] sqlParams) throws ResultsViewedDaoException;

}
