/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.tidsplan.jdbc;

import co.edu.sena.tidsplan.dao.*;
import co.edu.sena.tidsplan.factory.*;
import java.util.Date;
import co.edu.sena.tidsplan.dto.*;
import co.edu.sena.tidsplan.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ScheduleDaoImpl extends AbstractDAO implements ScheduleDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT start_hour, end_hour, id_version, name_day, id_trimester_current, name_modality, number_environment, name_headquartes, number_group, name_trimester, working_day_initials, document_number, document FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( start_hour, end_hour, id_version, name_day, id_trimester_current, name_modality, number_environment, name_headquartes, number_group, name_trimester, working_day_initials, document_number, document ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET start_hour = ?, end_hour = ?, id_version = ?, name_day = ?, id_trimester_current = ?, name_modality = ?, number_environment = ?, name_headquartes = ?, number_group = ?, name_trimester = ?, working_day_initials = ?, document_number = ?, document = ? WHERE start_hour = ? AND name_day = ? AND id_trimester_current = ? AND number_environment = ? AND name_headquartes = ? AND number_group = ? AND name_trimester = ? AND working_day_initials = ? AND document_number = ? AND document = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE start_hour = ? AND name_day = ? AND id_trimester_current = ? AND number_environment = ? AND name_headquartes = ? AND number_group = ? AND name_trimester = ? AND working_day_initials = ? AND document_number = ? AND document = ?";

	/** 
	 * Index of column start_hour
	 */
	protected static final int COLUMN_START_HOUR = 1;

	/** 
	 * Index of column end_hour
	 */
	protected static final int COLUMN_END_HOUR = 2;

	/** 
	 * Index of column id_version
	 */
	protected static final int COLUMN_ID_VERSION = 3;

	/** 
	 * Index of column name_day
	 */
	protected static final int COLUMN_NAME_DAY = 4;

	/** 
	 * Index of column id_trimester_current
	 */
	protected static final int COLUMN_ID_TRIMESTER_CURRENT = 5;

	/** 
	 * Index of column name_modality
	 */
	protected static final int COLUMN_NAME_MODALITY = 6;

	/** 
	 * Index of column number_environment
	 */
	protected static final int COLUMN_NUMBER_ENVIRONMENT = 7;

	/** 
	 * Index of column name_headquartes
	 */
	protected static final int COLUMN_NAME_HEADQUARTES = 8;

	/** 
	 * Index of column number_group
	 */
	protected static final int COLUMN_NUMBER_GROUP = 9;

	/** 
	 * Index of column name_trimester
	 */
	protected static final int COLUMN_NAME_TRIMESTER = 10;

	/** 
	 * Index of column working_day_initials
	 */
	protected static final int COLUMN_WORKING_DAY_INITIALS = 11;

	/** 
	 * Index of column document_number
	 */
	protected static final int COLUMN_DOCUMENT_NUMBER = 12;

	/** 
	 * Index of column document
	 */
	protected static final int COLUMN_DOCUMENT = 13;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 13;

	/** 
	 * Index of primary-key column start_hour
	 */
	protected static final int PK_COLUMN_START_HOUR = 1;

	/** 
	 * Index of primary-key column name_day
	 */
	protected static final int PK_COLUMN_NAME_DAY = 2;

	/** 
	 * Index of primary-key column id_trimester_current
	 */
	protected static final int PK_COLUMN_ID_TRIMESTER_CURRENT = 3;

	/** 
	 * Index of primary-key column number_environment
	 */
	protected static final int PK_COLUMN_NUMBER_ENVIRONMENT = 4;

	/** 
	 * Index of primary-key column name_headquartes
	 */
	protected static final int PK_COLUMN_NAME_HEADQUARTES = 5;

	/** 
	 * Index of primary-key column number_group
	 */
	protected static final int PK_COLUMN_NUMBER_GROUP = 6;

	/** 
	 * Index of primary-key column name_trimester
	 */
	protected static final int PK_COLUMN_NAME_TRIMESTER = 7;

	/** 
	 * Index of primary-key column working_day_initials
	 */
	protected static final int PK_COLUMN_WORKING_DAY_INITIALS = 8;

	/** 
	 * Index of primary-key column document_number
	 */
	protected static final int PK_COLUMN_DOCUMENT_NUMBER = 9;

	/** 
	 * Index of primary-key column document
	 */
	protected static final int PK_COLUMN_DOCUMENT = 10;

	/** 
	 * Inserts a new row in the schedule table.
	 */
	public SchedulePk insert(Schedule dto) throws ScheduleDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setTime(index++, dto.getStartHour()==null ? null : new java.sql.Time( dto.getStartHour().getTime() ) );
			stmt.setTime(index++, dto.getEndHour()==null ? null : new java.sql.Time( dto.getEndHour().getTime() ) );
			stmt.setInt( index++, dto.getIdVersion() );
			stmt.setString( index++, dto.getNameDay() );
			stmt.setString( index++, dto.getIdTrimesterCurrent() );
			stmt.setString( index++, dto.getNameModality() );
			stmt.setString( index++, dto.getNumberEnvironment() );
			stmt.setString( index++, dto.getNameHeadquartes() );
			stmt.setString( index++, dto.getNumberGroup() );
			stmt.setString( index++, dto.getNameTrimester() );
			stmt.setString( index++, dto.getWorkingDayInitials() );
			stmt.setString( index++, dto.getDocumentNumber() );
			stmt.setString( index++, dto.getDocument() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ScheduleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the schedule table.
	 */
	public void update(SchedulePk pk, Schedule dto) throws ScheduleDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setTime(index++, dto.getStartHour()==null ? null : new java.sql.Time( dto.getStartHour().getTime() ) );
			stmt.setTime(index++, dto.getEndHour()==null ? null : new java.sql.Time( dto.getEndHour().getTime() ) );
			stmt.setInt( index++, dto.getIdVersion() );
			stmt.setString( index++, dto.getNameDay() );
			stmt.setString( index++, dto.getIdTrimesterCurrent() );
			stmt.setString( index++, dto.getNameModality() );
			stmt.setString( index++, dto.getNumberEnvironment() );
			stmt.setString( index++, dto.getNameHeadquartes() );
			stmt.setString( index++, dto.getNumberGroup() );
			stmt.setString( index++, dto.getNameTrimester() );
			stmt.setString( index++, dto.getWorkingDayInitials() );
			stmt.setString( index++, dto.getDocumentNumber() );
			stmt.setString( index++, dto.getDocument() );
			stmt.setTime(14, pk.getStartHour()==null ? null : new java.sql.Time( pk.getStartHour().getTime() ) );
			stmt.setString( 15, pk.getNameDay() );
			stmt.setString( 16, pk.getIdTrimesterCurrent() );
			stmt.setString( 17, pk.getNumberEnvironment() );
			stmt.setString( 18, pk.getNameHeadquartes() );
			stmt.setString( 19, pk.getNumberGroup() );
			stmt.setString( 20, pk.getNameTrimester() );
			stmt.setString( 21, pk.getWorkingDayInitials() );
			stmt.setString( 22, pk.getDocumentNumber() );
			stmt.setString( 23, pk.getDocument() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ScheduleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the schedule table.
	 */
	public void delete(SchedulePk pk) throws ScheduleDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setTime(1, pk.getStartHour()==null ? null : new java.sql.Time( pk.getStartHour().getTime() ) );
			stmt.setString( 2, pk.getNameDay() );
			stmt.setString( 3, pk.getIdTrimesterCurrent() );
			stmt.setString( 4, pk.getNumberEnvironment() );
			stmt.setString( 5, pk.getNameHeadquartes() );
			stmt.setString( 6, pk.getNumberGroup() );
			stmt.setString( 7, pk.getNameTrimester() );
			stmt.setString( 8, pk.getWorkingDayInitials() );
			stmt.setString( 9, pk.getDocumentNumber() );
			stmt.setString( 10, pk.getDocument() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ScheduleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the schedule table that matches the specified primary-key value.
	 */
	public Schedule findByPrimaryKey(SchedulePk pk) throws ScheduleDaoException
	{
		return findByPrimaryKey( pk.getStartHour(), pk.getNameDay(), pk.getIdTrimesterCurrent(), pk.getNumberEnvironment(), pk.getNameHeadquartes(), pk.getNumberGroup(), pk.getNameTrimester(), pk.getWorkingDayInitials(), pk.getDocumentNumber(), pk.getDocument() );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'start_hour = :startHour AND name_day = :nameDay AND id_trimester_current = :idTrimesterCurrent AND number_environment = :numberEnvironment AND name_headquartes = :nameHeadquartes AND number_group = :numberGroup AND name_trimester = :nameTrimester AND working_day_initials = :workingDayInitials AND document_number = :documentNumber AND document = :document'.
	 */
	public Schedule findByPrimaryKey(Date startHour, String nameDay, String idTrimesterCurrent, String numberEnvironment, String nameHeadquartes, String numberGroup, String nameTrimester, String workingDayInitials, String documentNumber, String document) throws ScheduleDaoException
	{
		Schedule ret[] = findByDynamicSelect( SQL_SELECT + " WHERE start_hour = ? AND name_day = ? AND id_trimester_current = ? AND number_environment = ? AND name_headquartes = ? AND number_group = ? AND name_trimester = ? AND working_day_initials = ? AND document_number = ? AND document = ?", new Object[] { startHour==null ? null : new java.sql.Time( startHour.getTime() ), nameDay, idTrimesterCurrent, numberEnvironment, nameHeadquartes, numberGroup, nameTrimester, workingDayInitials, documentNumber, document } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria ''.
	 */
	public Schedule[] findAll() throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY start_hour, name_day, id_trimester_current, number_environment, name_headquartes, number_group, name_trimester, working_day_initials, document_number, document", null );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_day = :nameDay'.
	 */
	public Schedule[] findByDay(String nameDay) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name_day = ?", new Object[] { nameDay } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'number_environment = :numberEnvironment AND name_headquartes = :nameHeadquartes'.
	 */
	public Schedule[] findByEnvironment(String numberEnvironment, String nameHeadquartes) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE number_environment = ? AND name_headquartes = ?", new Object[] { numberEnvironment, nameHeadquartes } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'number_group = :numberGroup AND name_trimester = :nameTrimester AND working_day_initials = :workingDayInitials'.
	 */
	public Schedule[] findByGroupHasTrimester(String numberGroup, String nameTrimester, String workingDayInitials) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE number_group = ? AND name_trimester = ? AND working_day_initials = ?", new Object[] { numberGroup, nameTrimester, workingDayInitials } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'document_number = :documentNumber AND document = :document'.
	 */
	public Schedule[] findByInstructor(String documentNumber, String document) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE document_number = ? AND document = ?", new Object[] { documentNumber, document } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_modality = :nameModality'.
	 */
	public Schedule[] findByModality(String nameModality) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name_modality = ?", new Object[] { nameModality } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'id_version = :idVersion'.
	 */
	public Schedule[] findByVersion(int idVersion) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_version = ?", new Object[] {  new Integer(idVersion) } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'start_hour = :startHour'.
	 */
	public Schedule[] findWhereStartHourEquals(Date startHour) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE start_hour = ? ORDER BY start_hour", new Object[] { startHour==null ? null : new java.sql.Time( startHour.getTime() ) } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'end_hour = :endHour'.
	 */
	public Schedule[] findWhereEndHourEquals(Date endHour) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE end_hour = ? ORDER BY end_hour", new Object[] { endHour==null ? null : new java.sql.Time( endHour.getTime() ) } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'id_version = :idVersion'.
	 */
	public Schedule[] findWhereIdVersionEquals(int idVersion) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_version = ? ORDER BY id_version", new Object[] {  new Integer(idVersion) } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_day = :nameDay'.
	 */
	public Schedule[] findWhereNameDayEquals(String nameDay) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name_day = ? ORDER BY name_day", new Object[] { nameDay } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'id_trimester_current = :idTrimesterCurrent'.
	 */
	public Schedule[] findWhereIdTrimesterCurrentEquals(String idTrimesterCurrent) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_trimester_current = ? ORDER BY id_trimester_current", new Object[] { idTrimesterCurrent } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_modality = :nameModality'.
	 */
	public Schedule[] findWhereNameModalityEquals(String nameModality) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name_modality = ? ORDER BY name_modality", new Object[] { nameModality } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'number_environment = :numberEnvironment'.
	 */
	public Schedule[] findWhereNumberEnvironmentEquals(String numberEnvironment) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE number_environment = ? ORDER BY number_environment", new Object[] { numberEnvironment } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_headquartes = :nameHeadquartes'.
	 */
	public Schedule[] findWhereNameHeadquartesEquals(String nameHeadquartes) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name_headquartes = ? ORDER BY name_headquartes", new Object[] { nameHeadquartes } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'number_group = :numberGroup'.
	 */
	public Schedule[] findWhereNumberGroupEquals(String numberGroup) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE number_group = ? ORDER BY number_group", new Object[] { numberGroup } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_trimester = :nameTrimester'.
	 */
	public Schedule[] findWhereNameTrimesterEquals(String nameTrimester) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name_trimester = ? ORDER BY name_trimester", new Object[] { nameTrimester } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'working_day_initials = :workingDayInitials'.
	 */
	public Schedule[] findWhereWorkingDayInitialsEquals(String workingDayInitials) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE working_day_initials = ? ORDER BY working_day_initials", new Object[] { workingDayInitials } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'document_number = :documentNumber'.
	 */
	public Schedule[] findWhereDocumentNumberEquals(String documentNumber) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE document_number = ? ORDER BY document_number", new Object[] { documentNumber } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'document = :document'.
	 */
	public Schedule[] findWhereDocumentEquals(String document) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE document = ? ORDER BY document", new Object[] { document } );
	}

	/**
	 * Method 'ScheduleDaoImpl'
	 * 
	 */
	public ScheduleDaoImpl()
	{
	}

	/**
	 * Method 'ScheduleDaoImpl'
	 * 
	 * @param userConn
	 */
	public ScheduleDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "tidsplan.schedule";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Schedule fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Schedule dto = new Schedule();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Schedule[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Schedule dto = new Schedule();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Schedule ret[] = new Schedule[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Schedule dto, ResultSet rs) throws SQLException
	{
		dto.setStartHour( rs.getTime(COLUMN_START_HOUR ) );
		dto.setEndHour( rs.getTime(COLUMN_END_HOUR ) );
		dto.setIdVersion( rs.getInt( COLUMN_ID_VERSION ) );
		dto.setNameDay( rs.getString( COLUMN_NAME_DAY ) );
		dto.setIdTrimesterCurrent( rs.getString( COLUMN_ID_TRIMESTER_CURRENT ) );
		dto.setNameModality( rs.getString( COLUMN_NAME_MODALITY ) );
		dto.setNumberEnvironment( rs.getString( COLUMN_NUMBER_ENVIRONMENT ) );
		dto.setNameHeadquartes( rs.getString( COLUMN_NAME_HEADQUARTES ) );
		dto.setNumberGroup( rs.getString( COLUMN_NUMBER_GROUP ) );
		dto.setNameTrimester( rs.getString( COLUMN_NAME_TRIMESTER ) );
		dto.setWorkingDayInitials( rs.getString( COLUMN_WORKING_DAY_INITIALS ) );
		dto.setDocumentNumber( rs.getString( COLUMN_DOCUMENT_NUMBER ) );
		dto.setDocument( rs.getString( COLUMN_DOCUMENT ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Schedule dto)
	{
	}

	/** 
	 * Returns all rows from the schedule table that match the specified arbitrary SQL statement
	 */
	public Schedule[] findByDynamicSelect(String sql, Object[] sqlParams) throws ScheduleDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ScheduleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the schedule table that match the specified arbitrary SQL statement
	 */
	public Schedule[] findByDynamicWhere(String sql, Object[] sqlParams) throws ScheduleDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ScheduleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
