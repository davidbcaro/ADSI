/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.tidsplan.jdbc;

import co.edu.sena.tidsplan.dao.*;
import co.edu.sena.tidsplan.factory.*;
import co.edu.sena.tidsplan.dto.*;
import co.edu.sena.tidsplan.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CustomerHasRoleDaoImpl extends AbstractDAO implements CustomerHasRoleDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT document, document_number, idrol, status FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( document, document_number, idrol, status ) VALUES ( ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET document = ?, document_number = ?, idrol = ?, status = ? WHERE document_number = ? AND document = ? AND idrol = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE document_number = ? AND document = ? AND idrol = ?";

	/** 
	 * Index of column document
	 */
	protected static final int COLUMN_DOCUMENT = 1;

	/** 
	 * Index of column document_number
	 */
	protected static final int COLUMN_DOCUMENT_NUMBER = 2;

	/** 
	 * Index of column idrol
	 */
	protected static final int COLUMN_IDROL = 3;

	/** 
	 * Index of column status
	 */
	protected static final int COLUMN_STATUS = 4;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 4;

	/** 
	 * Index of primary-key column document_number
	 */
	protected static final int PK_COLUMN_DOCUMENT_NUMBER = 1;

	/** 
	 * Index of primary-key column document
	 */
	protected static final int PK_COLUMN_DOCUMENT = 2;

	/** 
	 * Index of primary-key column idrol
	 */
	protected static final int PK_COLUMN_IDROL = 3;

	/** 
	 * Inserts a new row in the customer_has_role table.
	 */
	public CustomerHasRolePk insert(CustomerHasRole dto) throws CustomerHasRoleDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getDocument() );
			stmt.setString( index++, dto.getDocumentNumber() );
			stmt.setString( index++, dto.getIdrol() );
			if (dto.isStatusNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getStatus() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CustomerHasRoleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the customer_has_role table.
	 */
	public void update(CustomerHasRolePk pk, CustomerHasRole dto) throws CustomerHasRoleDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getDocument() );
			stmt.setString( index++, dto.getDocumentNumber() );
			stmt.setString( index++, dto.getIdrol() );
			if (dto.isStatusNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getStatus() );
			}
		
			stmt.setString( 5, pk.getDocumentNumber() );
			stmt.setString( 6, pk.getDocument() );
			stmt.setString( 7, pk.getIdrol() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CustomerHasRoleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the customer_has_role table.
	 */
	public void delete(CustomerHasRolePk pk) throws CustomerHasRoleDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getDocumentNumber() );
			stmt.setString( 2, pk.getDocument() );
			stmt.setString( 3, pk.getIdrol() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CustomerHasRoleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the customer_has_role table that matches the specified primary-key value.
	 */
	public CustomerHasRole findByPrimaryKey(CustomerHasRolePk pk) throws CustomerHasRoleDaoException
	{
		return findByPrimaryKey( pk.getDocumentNumber(), pk.getDocument(), pk.getIdrol() );
	}

	/** 
	 * Returns all rows from the customer_has_role table that match the criteria 'document_number = :documentNumber AND document = :document AND idrol = :idrol'.
	 */
	public CustomerHasRole findByPrimaryKey(String documentNumber, String document, String idrol) throws CustomerHasRoleDaoException
	{
		CustomerHasRole ret[] = findByDynamicSelect( SQL_SELECT + " WHERE document_number = ? AND document = ? AND idrol = ?", new Object[] { documentNumber, document, idrol } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the customer_has_role table that match the criteria ''.
	 */
	public CustomerHasRole[] findAll() throws CustomerHasRoleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY document_number, document, idrol", null );
	}

	/** 
	 * Returns all rows from the customer_has_role table that match the criteria 'document = :document AND document_number = :documentNumber'.
	 */
	public CustomerHasRole[] findByCustomer(String document, String documentNumber) throws CustomerHasRoleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE document = ? AND document_number = ?", new Object[] { document, documentNumber } );
	}

	/** 
	 * Returns all rows from the customer_has_role table that match the criteria 'idrol = :idrol'.
	 */
	public CustomerHasRole[] findByRole(String idrol) throws CustomerHasRoleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE idrol = ?", new Object[] { idrol } );
	}

	/** 
	 * Returns all rows from the customer_has_role table that match the criteria 'document = :document'.
	 */
	public CustomerHasRole[] findWhereDocumentEquals(String document) throws CustomerHasRoleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE document = ? ORDER BY document", new Object[] { document } );
	}

	/** 
	 * Returns all rows from the customer_has_role table that match the criteria 'document_number = :documentNumber'.
	 */
	public CustomerHasRole[] findWhereDocumentNumberEquals(String documentNumber) throws CustomerHasRoleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE document_number = ? ORDER BY document_number", new Object[] { documentNumber } );
	}

	/** 
	 * Returns all rows from the customer_has_role table that match the criteria 'idrol = :idrol'.
	 */
	public CustomerHasRole[] findWhereIdrolEquals(String idrol) throws CustomerHasRoleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE idrol = ? ORDER BY idrol", new Object[] { idrol } );
	}

	/** 
	 * Returns all rows from the customer_has_role table that match the criteria 'status = :status'.
	 */
	public CustomerHasRole[] findWhereStatusEquals(short status) throws CustomerHasRoleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE status = ? ORDER BY status", new Object[] {  new Short(status) } );
	}

	/**
	 * Method 'CustomerHasRoleDaoImpl'
	 * 
	 */
	public CustomerHasRoleDaoImpl()
	{
	}

	/**
	 * Method 'CustomerHasRoleDaoImpl'
	 * 
	 * @param userConn
	 */
	public CustomerHasRoleDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "tidsplan.customer_has_role";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected CustomerHasRole fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			CustomerHasRole dto = new CustomerHasRole();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected CustomerHasRole[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			CustomerHasRole dto = new CustomerHasRole();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		CustomerHasRole ret[] = new CustomerHasRole[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(CustomerHasRole dto, ResultSet rs) throws SQLException
	{
		dto.setDocument( rs.getString( COLUMN_DOCUMENT ) );
		dto.setDocumentNumber( rs.getString( COLUMN_DOCUMENT_NUMBER ) );
		dto.setIdrol( rs.getString( COLUMN_IDROL ) );
		dto.setStatus( rs.getShort( COLUMN_STATUS ) );
		if (rs.wasNull()) {
			dto.setStatusNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(CustomerHasRole dto)
	{
	}

	/** 
	 * Returns all rows from the customer_has_role table that match the specified arbitrary SQL statement
	 */
	public CustomerHasRole[] findByDynamicSelect(String sql, Object[] sqlParams) throws CustomerHasRoleDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CustomerHasRoleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the customer_has_role table that match the specified arbitrary SQL statement
	 */
	public CustomerHasRole[] findByDynamicWhere(String sql, Object[] sqlParams) throws CustomerHasRoleDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CustomerHasRoleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
