/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.tidsplan.dao;

import java.util.Date;
import co.edu.sena.tidsplan.dto.*;
import co.edu.sena.tidsplan.exceptions.*;

public interface ScheduleDao
{
	/** 
	 * Inserts a new row in the schedule table.
	 */
	public SchedulePk insert(Schedule dto) throws ScheduleDaoException;

	/** 
	 * Updates a single row in the schedule table.
	 */
	public void update(SchedulePk pk, Schedule dto) throws ScheduleDaoException;

	/** 
	 * Deletes a single row in the schedule table.
	 */
	public void delete(SchedulePk pk) throws ScheduleDaoException;

	/** 
	 * Returns the rows from the schedule table that matches the specified primary-key value.
	 */
	public Schedule findByPrimaryKey(SchedulePk pk) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'start_hour = :startHour AND name_day = :nameDay AND id_trimester_current = :idTrimesterCurrent AND number_environment = :numberEnvironment AND name_headquartes = :nameHeadquartes AND number_group = :numberGroup AND name_trimester = :nameTrimester AND working_day_initials = :workingDayInitials AND document_number = :documentNumber AND document = :document'.
	 */
	public Schedule findByPrimaryKey(Date startHour, String nameDay, String idTrimesterCurrent, String numberEnvironment, String nameHeadquartes, String numberGroup, String nameTrimester, String workingDayInitials, String documentNumber, String document) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria ''.
	 */
	public Schedule[] findAll() throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_day = :nameDay'.
	 */
	public Schedule[] findByDay(String nameDay) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'number_environment = :numberEnvironment AND name_headquartes = :nameHeadquartes'.
	 */
	public Schedule[] findByEnvironment(String numberEnvironment, String nameHeadquartes) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'number_group = :numberGroup AND name_trimester = :nameTrimester AND working_day_initials = :workingDayInitials'.
	 */
	public Schedule[] findByGroupHasTrimester(String numberGroup, String nameTrimester, String workingDayInitials) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'document_number = :documentNumber AND document = :document'.
	 */
	public Schedule[] findByInstructor(String documentNumber, String document) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_modality = :nameModality'.
	 */
	public Schedule[] findByModality(String nameModality) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'id_version = :idVersion'.
	 */
	public Schedule[] findByVersion(int idVersion) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'start_hour = :startHour'.
	 */
	public Schedule[] findWhereStartHourEquals(Date startHour) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'end_hour = :endHour'.
	 */
	public Schedule[] findWhereEndHourEquals(Date endHour) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'id_version = :idVersion'.
	 */
	public Schedule[] findWhereIdVersionEquals(int idVersion) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_day = :nameDay'.
	 */
	public Schedule[] findWhereNameDayEquals(String nameDay) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'id_trimester_current = :idTrimesterCurrent'.
	 */
	public Schedule[] findWhereIdTrimesterCurrentEquals(String idTrimesterCurrent) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_modality = :nameModality'.
	 */
	public Schedule[] findWhereNameModalityEquals(String nameModality) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'number_environment = :numberEnvironment'.
	 */
	public Schedule[] findWhereNumberEnvironmentEquals(String numberEnvironment) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_headquartes = :nameHeadquartes'.
	 */
	public Schedule[] findWhereNameHeadquartesEquals(String nameHeadquartes) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'number_group = :numberGroup'.
	 */
	public Schedule[] findWhereNumberGroupEquals(String numberGroup) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_trimester = :nameTrimester'.
	 */
	public Schedule[] findWhereNameTrimesterEquals(String nameTrimester) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'working_day_initials = :workingDayInitials'.
	 */
	public Schedule[] findWhereWorkingDayInitialsEquals(String workingDayInitials) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'document_number = :documentNumber'.
	 */
	public Schedule[] findWhereDocumentNumberEquals(String documentNumber) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'document = :document'.
	 */
	public Schedule[] findWhereDocumentEquals(String document) throws ScheduleDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the schedule table that match the specified arbitrary SQL statement
	 */
	public Schedule[] findByDynamicSelect(String sql, Object[] sqlParams) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the specified arbitrary SQL statement
	 */
	public Schedule[] findByDynamicWhere(String sql, Object[] sqlParams) throws ScheduleDaoException;

}
