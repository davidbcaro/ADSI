/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.controler.dao.jdbc;

import co.edu.sena.controler.dao.dao.*;
import co.edu.sena.controler.dao.factory.*;
import java.util.Date;
import co.edu.sena.controler.dao.dto.*;
import co.edu.sena.controler.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ScheduleDaoImpl extends AbstractDAO implements ScheduleDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT hour_start, hour_end, name_modality, schedule_finish, version, version_actuality_trimester, number_environment, headquarters_name, name_day, document_type, identification_card_number, groups_number, trimester_name, working_day_initials FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( hour_start, hour_end, name_modality, schedule_finish, version, version_actuality_trimester, number_environment, headquarters_name, name_day, document_type, identification_card_number, groups_number, trimester_name, working_day_initials ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET hour_start = ?, hour_end = ?, name_modality = ?, schedule_finish = ?, version = ?, version_actuality_trimester = ?, number_environment = ?, headquarters_name = ?, name_day = ?, document_type = ?, identification_card_number = ?, groups_number = ?, trimester_name = ?, working_day_initials = ? WHERE version = ? AND version_actuality_trimester = ? AND number_environment = ? AND headquarters_name = ? AND name_day = ? AND document_type = ? AND identification_card_number = ? AND groups_number = ? AND trimester_name = ? AND working_day_initials = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE version = ? AND version_actuality_trimester = ? AND number_environment = ? AND headquarters_name = ? AND name_day = ? AND document_type = ? AND identification_card_number = ? AND groups_number = ? AND trimester_name = ? AND working_day_initials = ?";

	/** 
	 * Index of column hour_start
	 */
	protected static final int COLUMN_HOUR_START = 1;

	/** 
	 * Index of column hour_end
	 */
	protected static final int COLUMN_HOUR_END = 2;

	/** 
	 * Index of column name_modality
	 */
	protected static final int COLUMN_NAME_MODALITY = 3;

	/** 
	 * Index of column schedule_finish
	 */
	protected static final int COLUMN_SCHEDULE_FINISH = 4;

	/** 
	 * Index of column version
	 */
	protected static final int COLUMN_VERSION = 5;

	/** 
	 * Index of column version_actuality_trimester
	 */
	protected static final int COLUMN_VERSION_ACTUALITY_TRIMESTER = 6;

	/** 
	 * Index of column number_environment
	 */
	protected static final int COLUMN_NUMBER_ENVIRONMENT = 7;

	/** 
	 * Index of column headquarters_name
	 */
	protected static final int COLUMN_HEADQUARTERS_NAME = 8;

	/** 
	 * Index of column name_day
	 */
	protected static final int COLUMN_NAME_DAY = 9;

	/** 
	 * Index of column document_type
	 */
	protected static final int COLUMN_DOCUMENT_TYPE = 10;

	/** 
	 * Index of column identification_card_number
	 */
	protected static final int COLUMN_IDENTIFICATION_CARD_NUMBER = 11;

	/** 
	 * Index of column groups_number
	 */
	protected static final int COLUMN_GROUPS_NUMBER = 12;

	/** 
	 * Index of column trimester_name
	 */
	protected static final int COLUMN_TRIMESTER_NAME = 13;

	/** 
	 * Index of column working_day_initials
	 */
	protected static final int COLUMN_WORKING_DAY_INITIALS = 14;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 14;

	/** 
	 * Index of primary-key column version
	 */
	protected static final int PK_COLUMN_VERSION = 1;

	/** 
	 * Index of primary-key column version_actuality_trimester
	 */
	protected static final int PK_COLUMN_VERSION_ACTUALITY_TRIMESTER = 2;

	/** 
	 * Index of primary-key column number_environment
	 */
	protected static final int PK_COLUMN_NUMBER_ENVIRONMENT = 3;

	/** 
	 * Index of primary-key column headquarters_name
	 */
	protected static final int PK_COLUMN_HEADQUARTERS_NAME = 4;

	/** 
	 * Index of primary-key column name_day
	 */
	protected static final int PK_COLUMN_NAME_DAY = 5;

	/** 
	 * Index of primary-key column document_type
	 */
	protected static final int PK_COLUMN_DOCUMENT_TYPE = 6;

	/** 
	 * Index of primary-key column identification_card_number
	 */
	protected static final int PK_COLUMN_IDENTIFICATION_CARD_NUMBER = 7;

	/** 
	 * Index of primary-key column groups_number
	 */
	protected static final int PK_COLUMN_GROUPS_NUMBER = 8;

	/** 
	 * Index of primary-key column trimester_name
	 */
	protected static final int PK_COLUMN_TRIMESTER_NAME = 9;

	/** 
	 * Index of primary-key column working_day_initials
	 */
	protected static final int PK_COLUMN_WORKING_DAY_INITIALS = 10;

	/** 
	 * Inserts a new row in the schedule table.
	 */
	public SchedulePk insert(Schedule dto) throws ScheduleDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getHourStart() );
			stmt.setString( index++, dto.getHourEnd() );
			stmt.setString( index++, dto.getNameModality() );
			stmt.setDate(index++, dto.getScheduleFinish()==null ? null : new java.sql.Date( dto.getScheduleFinish().getTime() ) );
			stmt.setInt( index++, dto.getVersion() );
			stmt.setString( index++, dto.getVersionActualityTrimester() );
			stmt.setString( index++, dto.getNumberEnvironment() );
			stmt.setString( index++, dto.getHeadquartersName() );
			stmt.setString( index++, dto.getNameDay() );
			stmt.setString( index++, dto.getDocumentType() );
			stmt.setString( index++, dto.getIdentificationCardNumber() );
			stmt.setString( index++, dto.getGroupsNumber() );
			stmt.setString( index++, dto.getTrimesterName() );
			stmt.setString( index++, dto.getWorkingDayInitials() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ScheduleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the schedule table.
	 */
	public void update(SchedulePk pk, Schedule dto) throws ScheduleDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getHourStart() );
			stmt.setString( index++, dto.getHourEnd() );
			stmt.setString( index++, dto.getNameModality() );
			stmt.setDate(index++, dto.getScheduleFinish()==null ? null : new java.sql.Date( dto.getScheduleFinish().getTime() ) );
			stmt.setInt( index++, dto.getVersion() );
			stmt.setString( index++, dto.getVersionActualityTrimester() );
			stmt.setString( index++, dto.getNumberEnvironment() );
			stmt.setString( index++, dto.getHeadquartersName() );
			stmt.setString( index++, dto.getNameDay() );
			stmt.setString( index++, dto.getDocumentType() );
			stmt.setString( index++, dto.getIdentificationCardNumber() );
			stmt.setString( index++, dto.getGroupsNumber() );
			stmt.setString( index++, dto.getTrimesterName() );
			stmt.setString( index++, dto.getWorkingDayInitials() );
			stmt.setInt( 15, pk.getVersion() );
			stmt.setString( 16, pk.getVersionActualityTrimester() );
			stmt.setString( 17, pk.getNumberEnvironment() );
			stmt.setString( 18, pk.getHeadquartersName() );
			stmt.setString( 19, pk.getNameDay() );
			stmt.setString( 20, pk.getDocumentType() );
			stmt.setString( 21, pk.getIdentificationCardNumber() );
			stmt.setString( 22, pk.getGroupsNumber() );
			stmt.setString( 23, pk.getTrimesterName() );
			stmt.setString( 24, pk.getWorkingDayInitials() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ScheduleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the schedule table.
	 */
	public void delete(SchedulePk pk) throws ScheduleDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getVersion() );
			stmt.setString( 2, pk.getVersionActualityTrimester() );
			stmt.setString( 3, pk.getNumberEnvironment() );
			stmt.setString( 4, pk.getHeadquartersName() );
			stmt.setString( 5, pk.getNameDay() );
			stmt.setString( 6, pk.getDocumentType() );
			stmt.setString( 7, pk.getIdentificationCardNumber() );
			stmt.setString( 8, pk.getGroupsNumber() );
			stmt.setString( 9, pk.getTrimesterName() );
			stmt.setString( 10, pk.getWorkingDayInitials() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ScheduleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the schedule table that matches the specified primary-key value.
	 */
	public Schedule findByPrimaryKey(SchedulePk pk) throws ScheduleDaoException
	{
		return findByPrimaryKey( pk.getVersion(), pk.getVersionActualityTrimester(), pk.getNumberEnvironment(), pk.getHeadquartersName(), pk.getNameDay(), pk.getDocumentType(), pk.getIdentificationCardNumber(), pk.getGroupsNumber(), pk.getTrimesterName(), pk.getWorkingDayInitials() );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'version = :version AND version_actuality_trimester = :versionActualityTrimester AND number_environment = :numberEnvironment AND headquarters_name = :headquartersName AND name_day = :nameDay AND document_type = :documentType AND identification_card_number = :identificationCardNumber AND groups_number = :groupsNumber AND trimester_name = :trimesterName AND working_day_initials = :workingDayInitials'.
	 */
	public Schedule findByPrimaryKey(int version, String versionActualityTrimester, String numberEnvironment, String headquartersName, String nameDay, String documentType, String identificationCardNumber, String groupsNumber, String trimesterName, String workingDayInitials) throws ScheduleDaoException
	{
		Schedule ret[] = findByDynamicSelect( SQL_SELECT + " WHERE version = ? AND version_actuality_trimester = ? AND number_environment = ? AND headquarters_name = ? AND name_day = ? AND document_type = ? AND identification_card_number = ? AND groups_number = ? AND trimester_name = ? AND working_day_initials = ?", new Object[] {  new Integer(version), versionActualityTrimester, numberEnvironment, headquartersName, nameDay, documentType, identificationCardNumber, groupsNumber, trimesterName, workingDayInitials } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria ''.
	 */
	public Schedule[] findAll() throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY version, version_actuality_trimester, number_environment, headquarters_name, name_day, document_type, identification_card_number, groups_number, trimester_name, working_day_initials", null );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_day = :nameDay'.
	 */
	public Schedule[] findByDay(String nameDay) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name_day = ?", new Object[] { nameDay } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'number_environment = :numberEnvironment AND headquarters_name = :headquartersName'.
	 */
	public Schedule[] findByEnvironment(String numberEnvironment, String headquartersName) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE number_environment = ? AND headquarters_name = ?", new Object[] { numberEnvironment, headquartersName } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'groups_number = :groupsNumber AND trimester_name = :trimesterName AND working_day_initials = :workingDayInitials'.
	 */
	public Schedule[] findByGroupNumberHasTrimester(String groupsNumber, String trimesterName, String workingDayInitials) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE groups_number = ? AND trimester_name = ? AND working_day_initials = ?", new Object[] { groupsNumber, trimesterName, workingDayInitials } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'document_type = :documentType AND identification_card_number = :identificationCardNumber'.
	 */
	public Schedule[] findByInstructor(String documentType, String identificationCardNumber) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE document_type = ? AND identification_card_number = ?", new Object[] { documentType, identificationCardNumber } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_modality = :nameModality'.
	 */
	public Schedule[] findByModality(String nameModality) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name_modality = ?", new Object[] { nameModality } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'version = :version AND version_actuality_trimester = :versionActualityTrimester'.
	 */
	public Schedule[] findByVersionSchedule(int version, String versionActualityTrimester) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE version = ? AND version_actuality_trimester = ?", new Object[] {  new Integer(version), versionActualityTrimester } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'hour_start = :hourStart'.
	 */
	public Schedule[] findWhereHourStartEquals(String hourStart) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE hour_start = ? ORDER BY hour_start", new Object[] { hourStart } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'hour_end = :hourEnd'.
	 */
	public Schedule[] findWhereHourEndEquals(String hourEnd) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE hour_end = ? ORDER BY hour_end", new Object[] { hourEnd } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_modality = :nameModality'.
	 */
	public Schedule[] findWhereNameModalityEquals(String nameModality) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name_modality = ? ORDER BY name_modality", new Object[] { nameModality } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'schedule_finish = :scheduleFinish'.
	 */
	public Schedule[] findWhereScheduleFinishEquals(Date scheduleFinish) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE schedule_finish = ? ORDER BY schedule_finish", new Object[] { scheduleFinish==null ? null : new java.sql.Date( scheduleFinish.getTime() ) } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'version = :version'.
	 */
	public Schedule[] findWhereVersionEquals(int version) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE version = ? ORDER BY version", new Object[] {  new Integer(version) } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'version_actuality_trimester = :versionActualityTrimester'.
	 */
	public Schedule[] findWhereVersionActualityTrimesterEquals(String versionActualityTrimester) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE version_actuality_trimester = ? ORDER BY version_actuality_trimester", new Object[] { versionActualityTrimester } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'number_environment = :numberEnvironment'.
	 */
	public Schedule[] findWhereNumberEnvironmentEquals(String numberEnvironment) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE number_environment = ? ORDER BY number_environment", new Object[] { numberEnvironment } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'headquarters_name = :headquartersName'.
	 */
	public Schedule[] findWhereHeadquartersNameEquals(String headquartersName) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE headquarters_name = ? ORDER BY headquarters_name", new Object[] { headquartersName } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_day = :nameDay'.
	 */
	public Schedule[] findWhereNameDayEquals(String nameDay) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name_day = ? ORDER BY name_day", new Object[] { nameDay } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'document_type = :documentType'.
	 */
	public Schedule[] findWhereDocumentTypeEquals(String documentType) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE document_type = ? ORDER BY document_type", new Object[] { documentType } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'identification_card_number = :identificationCardNumber'.
	 */
	public Schedule[] findWhereIdentificationCardNumberEquals(String identificationCardNumber) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE identification_card_number = ? ORDER BY identification_card_number", new Object[] { identificationCardNumber } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'groups_number = :groupsNumber'.
	 */
	public Schedule[] findWhereGroupsNumberEquals(String groupsNumber) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE groups_number = ? ORDER BY groups_number", new Object[] { groupsNumber } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'trimester_name = :trimesterName'.
	 */
	public Schedule[] findWhereTrimesterNameEquals(String trimesterName) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE trimester_name = ? ORDER BY trimester_name", new Object[] { trimesterName } );
	}

	/** 
	 * Returns all rows from the schedule table that match the criteria 'working_day_initials = :workingDayInitials'.
	 */
	public Schedule[] findWhereWorkingDayInitialsEquals(String workingDayInitials) throws ScheduleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE working_day_initials = ? ORDER BY working_day_initials", new Object[] { workingDayInitials } );
	}

	/**
	 * Method 'ScheduleDaoImpl'
	 * 
	 */
	public ScheduleDaoImpl()
	{
	}

	/**
	 * Method 'ScheduleDaoImpl'
	 * 
	 * @param userConn
	 */
	public ScheduleDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "joycd.schedule";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Schedule fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Schedule dto = new Schedule();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Schedule[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Schedule dto = new Schedule();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Schedule ret[] = new Schedule[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Schedule dto, ResultSet rs) throws SQLException
	{
		dto.setHourStart( rs.getString( COLUMN_HOUR_START ) );
		dto.setHourEnd( rs.getString( COLUMN_HOUR_END ) );
		dto.setNameModality( rs.getString( COLUMN_NAME_MODALITY ) );
		dto.setScheduleFinish( rs.getDate(COLUMN_SCHEDULE_FINISH ) );
		dto.setVersion( rs.getInt( COLUMN_VERSION ) );
		dto.setVersionActualityTrimester( rs.getString( COLUMN_VERSION_ACTUALITY_TRIMESTER ) );
		dto.setNumberEnvironment( rs.getString( COLUMN_NUMBER_ENVIRONMENT ) );
		dto.setHeadquartersName( rs.getString( COLUMN_HEADQUARTERS_NAME ) );
		dto.setNameDay( rs.getString( COLUMN_NAME_DAY ) );
		dto.setDocumentType( rs.getString( COLUMN_DOCUMENT_TYPE ) );
		dto.setIdentificationCardNumber( rs.getString( COLUMN_IDENTIFICATION_CARD_NUMBER ) );
		dto.setGroupsNumber( rs.getString( COLUMN_GROUPS_NUMBER ) );
		dto.setTrimesterName( rs.getString( COLUMN_TRIMESTER_NAME ) );
		dto.setWorkingDayInitials( rs.getString( COLUMN_WORKING_DAY_INITIALS ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Schedule dto)
	{
	}

	/** 
	 * Returns all rows from the schedule table that match the specified arbitrary SQL statement
	 */
	public Schedule[] findByDynamicSelect(String sql, Object[] sqlParams) throws ScheduleDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ScheduleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the schedule table that match the specified arbitrary SQL statement
	 */
	public Schedule[] findByDynamicWhere(String sql, Object[] sqlParams) throws ScheduleDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ScheduleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
