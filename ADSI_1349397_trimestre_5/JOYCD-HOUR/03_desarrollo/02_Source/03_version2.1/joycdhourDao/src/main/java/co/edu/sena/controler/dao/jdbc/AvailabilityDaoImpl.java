/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.controler.dao.jdbc;

import co.edu.sena.controler.dao.dao.*;
import co.edu.sena.controler.dao.factory.*;
import java.util.Date;
import co.edu.sena.controler.dao.dto.*;
import co.edu.sena.controler.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class AvailabilityDaoImpl extends AbstractDAO implements AvailabilityDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT hour_start, hour_end, document_type, identification_card, name_day, working_day_initials FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( hour_start, hour_end, document_type, identification_card, name_day, working_day_initials ) VALUES ( ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET hour_start = ?, hour_end = ?, document_type = ?, identification_card = ?, name_day = ?, working_day_initials = ? WHERE hour_start = ? AND document_type = ? AND identification_card = ? AND name_day = ? AND working_day_initials = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE hour_start = ? AND document_type = ? AND identification_card = ? AND name_day = ? AND working_day_initials = ?";

	/** 
	 * Index of column hour_start
	 */
	protected static final int COLUMN_HOUR_START = 1;

	/** 
	 * Index of column hour_end
	 */
	protected static final int COLUMN_HOUR_END = 2;

	/** 
	 * Index of column document_type
	 */
	protected static final int COLUMN_DOCUMENT_TYPE = 3;

	/** 
	 * Index of column identification_card
	 */
	protected static final int COLUMN_IDENTIFICATION_CARD = 4;

	/** 
	 * Index of column name_day
	 */
	protected static final int COLUMN_NAME_DAY = 5;

	/** 
	 * Index of column working_day_initials
	 */
	protected static final int COLUMN_WORKING_DAY_INITIALS = 6;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 6;

	/** 
	 * Index of primary-key column hour_start
	 */
	protected static final int PK_COLUMN_HOUR_START = 1;

	/** 
	 * Index of primary-key column document_type
	 */
	protected static final int PK_COLUMN_DOCUMENT_TYPE = 2;

	/** 
	 * Index of primary-key column identification_card
	 */
	protected static final int PK_COLUMN_IDENTIFICATION_CARD = 3;

	/** 
	 * Index of primary-key column name_day
	 */
	protected static final int PK_COLUMN_NAME_DAY = 4;

	/** 
	 * Index of primary-key column working_day_initials
	 */
	protected static final int PK_COLUMN_WORKING_DAY_INITIALS = 5;

	/** 
	 * Inserts a new row in the availability table.
	 */
	public AvailabilityPk insert(Availability dto) throws AvailabilityDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setTime(index++, dto.getHourStart()==null ? null : new java.sql.Time( dto.getHourStart().getTime() ) );
			stmt.setTime(index++, dto.getHourEnd()==null ? null : new java.sql.Time( dto.getHourEnd().getTime() ) );
			stmt.setString( index++, dto.getDocumentType() );
			stmt.setString( index++, dto.getIdentificationCard() );
			stmt.setString( index++, dto.getNameDay() );
			stmt.setString( index++, dto.getWorkingDayInitials() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AvailabilityDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the availability table.
	 */
	public void update(AvailabilityPk pk, Availability dto) throws AvailabilityDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setTime(index++, dto.getHourStart()==null ? null : new java.sql.Time( dto.getHourStart().getTime() ) );
			stmt.setTime(index++, dto.getHourEnd()==null ? null : new java.sql.Time( dto.getHourEnd().getTime() ) );
			stmt.setString( index++, dto.getDocumentType() );
			stmt.setString( index++, dto.getIdentificationCard() );
			stmt.setString( index++, dto.getNameDay() );
			stmt.setString( index++, dto.getWorkingDayInitials() );
			stmt.setTime(7, pk.getHourStart()==null ? null : new java.sql.Time( pk.getHourStart().getTime() ) );
			stmt.setString( 8, pk.getDocumentType() );
			stmt.setString( 9, pk.getIdentificationCard() );
			stmt.setString( 10, pk.getNameDay() );
			stmt.setString( 11, pk.getWorkingDayInitials() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AvailabilityDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the availability table.
	 */
	public void delete(AvailabilityPk pk) throws AvailabilityDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setTime(1, pk.getHourStart()==null ? null : new java.sql.Time( pk.getHourStart().getTime() ) );
			stmt.setString( 2, pk.getDocumentType() );
			stmt.setString( 3, pk.getIdentificationCard() );
			stmt.setString( 4, pk.getNameDay() );
			stmt.setString( 5, pk.getWorkingDayInitials() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AvailabilityDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the availability table that matches the specified primary-key value.
	 */
	public Availability findByPrimaryKey(AvailabilityPk pk) throws AvailabilityDaoException
	{
		return findByPrimaryKey( pk.getHourStart(), pk.getDocumentType(), pk.getIdentificationCard(), pk.getNameDay(), pk.getWorkingDayInitials() );
	}

	/** 
	 * Returns all rows from the availability table that match the criteria 'hour_start = :hourStart AND document_type = :documentType AND identification_card = :identificationCard AND name_day = :nameDay AND working_day_initials = :workingDayInitials'.
	 */
	public Availability findByPrimaryKey(Date hourStart, String documentType, String identificationCard, String nameDay, String workingDayInitials) throws AvailabilityDaoException
	{
		Availability ret[] = findByDynamicSelect( SQL_SELECT + " WHERE hour_start = ? AND document_type = ? AND identification_card = ? AND name_day = ? AND working_day_initials = ?", new Object[] { hourStart==null ? null : new java.sql.Time( hourStart.getTime() ), documentType, identificationCard, nameDay, workingDayInitials } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the availability table that match the criteria ''.
	 */
	public Availability[] findAll() throws AvailabilityDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY hour_start, document_type, identification_card, name_day, working_day_initials", null );
	}

	/** 
	 * Returns all rows from the availability table that match the criteria 'name_day = :nameDay'.
	 */
	public Availability[] findByDay(String nameDay) throws AvailabilityDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name_day = ?", new Object[] { nameDay } );
	}

	/** 
	 * Returns all rows from the availability table that match the criteria 'document_type = :documentType AND identification_card = :identificationCard'.
	 */
	public Availability[] findByInstructor(String documentType, String identificationCard) throws AvailabilityDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE document_type = ? AND identification_card = ?", new Object[] { documentType, identificationCard } );
	}

	/** 
	 * Returns all rows from the availability table that match the criteria 'working_day_initials = :workingDayInitials'.
	 */
	public Availability[] findByWorkingDay(String workingDayInitials) throws AvailabilityDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE working_day_initials = ?", new Object[] { workingDayInitials } );
	}

	/** 
	 * Returns all rows from the availability table that match the criteria 'hour_start = :hourStart'.
	 */
	public Availability[] findWhereHourStartEquals(Date hourStart) throws AvailabilityDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE hour_start = ? ORDER BY hour_start", new Object[] { hourStart==null ? null : new java.sql.Time( hourStart.getTime() ) } );
	}

	/** 
	 * Returns all rows from the availability table that match the criteria 'hour_end = :hourEnd'.
	 */
	public Availability[] findWhereHourEndEquals(Date hourEnd) throws AvailabilityDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE hour_end = ? ORDER BY hour_end", new Object[] { hourEnd==null ? null : new java.sql.Time( hourEnd.getTime() ) } );
	}

	/** 
	 * Returns all rows from the availability table that match the criteria 'document_type = :documentType'.
	 */
	public Availability[] findWhereDocumentTypeEquals(String documentType) throws AvailabilityDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE document_type = ? ORDER BY document_type", new Object[] { documentType } );
	}

	/** 
	 * Returns all rows from the availability table that match the criteria 'identification_card = :identificationCard'.
	 */
	public Availability[] findWhereIdentificationCardEquals(String identificationCard) throws AvailabilityDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE identification_card = ? ORDER BY identification_card", new Object[] { identificationCard } );
	}

	/** 
	 * Returns all rows from the availability table that match the criteria 'name_day = :nameDay'.
	 */
	public Availability[] findWhereNameDayEquals(String nameDay) throws AvailabilityDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name_day = ? ORDER BY name_day", new Object[] { nameDay } );
	}

	/** 
	 * Returns all rows from the availability table that match the criteria 'working_day_initials = :workingDayInitials'.
	 */
	public Availability[] findWhereWorkingDayInitialsEquals(String workingDayInitials) throws AvailabilityDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE working_day_initials = ? ORDER BY working_day_initials", new Object[] { workingDayInitials } );
	}

	/**
	 * Method 'AvailabilityDaoImpl'
	 * 
	 */
	public AvailabilityDaoImpl()
	{
	}

	/**
	 * Method 'AvailabilityDaoImpl'
	 * 
	 * @param userConn
	 */
	public AvailabilityDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "joycd.availability";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Availability fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Availability dto = new Availability();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Availability[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Availability dto = new Availability();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Availability ret[] = new Availability[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Availability dto, ResultSet rs) throws SQLException
	{
		dto.setHourStart( rs.getTime(COLUMN_HOUR_START ) );
		dto.setHourEnd( rs.getTime(COLUMN_HOUR_END ) );
		dto.setDocumentType( rs.getString( COLUMN_DOCUMENT_TYPE ) );
		dto.setIdentificationCard( rs.getString( COLUMN_IDENTIFICATION_CARD ) );
		dto.setNameDay( rs.getString( COLUMN_NAME_DAY ) );
		dto.setWorkingDayInitials( rs.getString( COLUMN_WORKING_DAY_INITIALS ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Availability dto)
	{
	}

	/** 
	 * Returns all rows from the availability table that match the specified arbitrary SQL statement
	 */
	public Availability[] findByDynamicSelect(String sql, Object[] sqlParams) throws AvailabilityDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AvailabilityDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the availability table that match the specified arbitrary SQL statement
	 */
	public Availability[] findByDynamicWhere(String sql, Object[] sqlParams) throws AvailabilityDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AvailabilityDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
