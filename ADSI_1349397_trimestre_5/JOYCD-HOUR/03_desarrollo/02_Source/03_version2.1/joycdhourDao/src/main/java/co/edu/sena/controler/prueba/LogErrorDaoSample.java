/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.controler.prueba;

import java.math.*;
import java.util.Date;
import java.util.Collection;
import co.edu.sena.controler.dao.dao.LogErrorDao;
import co.edu.sena.controler.dao.dto.LogError;
import co.edu.sena.controler.dao.exceptions.LogErrorDaoException;
import co.edu.sena.controler.dao.factory.LogErrorDaoFactory;

public class LogErrorDaoSample
{
	/**
	 * Method 'main'
	 * 
	 * @param arg
	 * @throws Exception
	 */
	public static void main(String[] arg) throws Exception
	{
		// Uncomment one of the lines below to test the generated code
		
		// findAll();
		// findWhereLogErrorEquals(0);
		// findWhereLevelEquals("");
		// findWhereLogNameEquals("");
		// findWhereMessageEquals("");
		// findWhereDateEquals(null);
		// findWhereUserEquals("");
	}

	/**
	 * Method 'findAll'
	 * 
	 */
	public static void findAll()
	{
		try {
			LogErrorDao _dao = getLogErrorDao();
			LogError _result[] = _dao.findAll();
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereLogErrorEquals'
	 * 
	 * @param logError
	 */
	public static void findWhereLogErrorEquals(int logError)
	{
		try {
			LogErrorDao _dao = getLogErrorDao();
			LogError _result[] = _dao.findWhereLogErrorEquals(logError);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereLevelEquals'
	 * 
	 * @param level
	 */
	public static void findWhereLevelEquals(String level)
	{
		try {
			LogErrorDao _dao = getLogErrorDao();
			LogError _result[] = _dao.findWhereLevelEquals(level);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereLogNameEquals'
	 * 
	 * @param logName
	 */
	public static void findWhereLogNameEquals(String logName)
	{
		try {
			LogErrorDao _dao = getLogErrorDao();
			LogError _result[] = _dao.findWhereLogNameEquals(logName);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereMessageEquals'
	 * 
	 * @param message
	 */
	public static void findWhereMessageEquals(String message)
	{
		try {
			LogErrorDao _dao = getLogErrorDao();
			LogError _result[] = _dao.findWhereMessageEquals(message);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereDateEquals'
	 * 
	 * @param date
	 */
	public static void findWhereDateEquals(Date date)
	{
		try {
			LogErrorDao _dao = getLogErrorDao();
			LogError _result[] = _dao.findWhereDateEquals(date);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereUserEquals'
	 * 
	 * @param user
	 */
	public static void findWhereUserEquals(String user)
	{
		try {
			LogErrorDao _dao = getLogErrorDao();
			LogError _result[] = _dao.findWhereUserEquals(user);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'getLogErrorDao'
	 * 
	 * @return LogErrorDao
	 */
	public static LogErrorDao getLogErrorDao()
	{
		return LogErrorDaoFactory.create();
	}

	/**
	 * Method 'display'
	 * 
	 * @param dto
	 */
	public static void display(LogError dto)
	{
		StringBuffer buf = new StringBuffer();
		buf.append( dto.getLogError() );
		buf.append( ", " );
		buf.append( dto.getLevel() );
		buf.append( ", " );
		buf.append( dto.getLogName() );
		buf.append( ", " );
		buf.append( dto.getMessage() );
		buf.append( ", " );
		buf.append( dto.getDate() );
		buf.append( ", " );
		buf.append( dto.getUser() );
		System.out.println( buf.toString() );
	}

}
