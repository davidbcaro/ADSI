/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.controler.dao.dao;

import co.edu.sena.controler.dao.dto.*;
import co.edu.sena.controler.dao.exceptions.*;

public interface CustomerDao
{
	/** 
	 * Inserts a new row in the customer table.
	 */
	public CustomerPk insert(Customer dto) throws CustomerDaoException;

	/** 
	 * Updates a single row in the customer table.
	 */
	public void update(CustomerPk pk, Customer dto) throws CustomerDaoException;

	/** 
	 * Deletes a single row in the customer table.
	 */
	public void delete(CustomerPk pk) throws CustomerDaoException;

	/** 
	 * Returns the rows from the customer table that matches the specified primary-key value.
	 */
	public Customer findByPrimaryKey(CustomerPk pk) throws CustomerDaoException;

	/** 
	 * Returns all rows from the customer table that match the criteria 'document_type = :documentType AND identification_card_number = :identificationCardNumber'.
	 */
	public Customer findByPrimaryKey(String documentType, String identificationCardNumber) throws CustomerDaoException;

	/** 
	 * Returns all rows from the customer table that match the criteria ''.
	 */
	public Customer[] findAll() throws CustomerDaoException;

	/** 
	 * Returns all rows from the customer table that match the criteria 'identification_card_number = :identificationCardNumber'.
	 */
	public Customer[] findByIdentificationCard(String identificationCardNumber) throws CustomerDaoException;

	/** 
	 * Returns all rows from the customer table that match the criteria 'document_type = :documentType'.
	 */
	public Customer[] findWhereDocumentTypeEquals(String documentType) throws CustomerDaoException;

	/** 
	 * Returns all rows from the customer table that match the criteria 'first_name = :firstName'.
	 */
	public Customer[] findWhereFirstNameEquals(String firstName) throws CustomerDaoException;

	/** 
	 * Returns all rows from the customer table that match the criteria 'second_name = :secondName'.
	 */
	public Customer[] findWhereSecondNameEquals(String secondName) throws CustomerDaoException;

	/** 
	 * Returns all rows from the customer table that match the criteria 'first_last_name = :firstLastName'.
	 */
	public Customer[] findWhereFirstLastNameEquals(String firstLastName) throws CustomerDaoException;

	/** 
	 * Returns all rows from the customer table that match the criteria 'second_last_name = :secondLastName'.
	 */
	public Customer[] findWhereSecondLastNameEquals(String secondLastName) throws CustomerDaoException;

	/** 
	 * Returns all rows from the customer table that match the criteria 'photo = :photo'.
	 */
	public Customer[] findWherePhotoEquals(byte[] photo) throws CustomerDaoException;

	/** 
	 * Returns all rows from the customer table that match the criteria 'identification_card_number = :identificationCardNumber'.
	 */
	public Customer[] findWhereIdentificationCardNumberEquals(String identificationCardNumber) throws CustomerDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the customer table that match the specified arbitrary SQL statement
	 */
	public Customer[] findByDynamicSelect(String sql, Object[] sqlParams) throws CustomerDaoException;

	/** 
	 * Returns all rows from the customer table that match the specified arbitrary SQL statement
	 */
	public Customer[] findByDynamicWhere(String sql, Object[] sqlParams) throws CustomerDaoException;

}
