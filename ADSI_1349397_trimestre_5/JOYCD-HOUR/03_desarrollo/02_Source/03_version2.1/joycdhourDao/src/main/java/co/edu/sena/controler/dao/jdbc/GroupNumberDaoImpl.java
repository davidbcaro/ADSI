/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.controler.dao.jdbc;

import co.edu.sena.controler.dao.dao.*;
import co.edu.sena.controler.dao.factory.*;
import java.util.Date;
import co.edu.sena.controler.dao.dto.*;
import co.edu.sena.controler.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class GroupNumberDaoImpl extends AbstractDAO implements GroupNumberDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT groups_number, start_date, finish_date, route, program_code, version_code, status_group_number FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( groups_number, start_date, finish_date, route, program_code, version_code, status_group_number ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET groups_number = ?, start_date = ?, finish_date = ?, route = ?, program_code = ?, version_code = ?, status_group_number = ? WHERE groups_number = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE groups_number = ?";

	/** 
	 * Index of column groups_number
	 */
	protected static final int COLUMN_GROUPS_NUMBER = 1;

	/** 
	 * Index of column start_date
	 */
	protected static final int COLUMN_START_DATE = 2;

	/** 
	 * Index of column finish_date
	 */
	protected static final int COLUMN_FINISH_DATE = 3;

	/** 
	 * Index of column route
	 */
	protected static final int COLUMN_ROUTE = 4;

	/** 
	 * Index of column program_code
	 */
	protected static final int COLUMN_PROGRAM_CODE = 5;

	/** 
	 * Index of column version_code
	 */
	protected static final int COLUMN_VERSION_CODE = 6;

	/** 
	 * Index of column status_group_number
	 */
	protected static final int COLUMN_STATUS_GROUP_NUMBER = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column groups_number
	 */
	protected static final int PK_COLUMN_GROUPS_NUMBER = 1;

	/** 
	 * Inserts a new row in the group_number table.
	 */
	public GroupNumberPk insert(GroupNumber dto) throws GroupNumberDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getGroupsNumber() );
			stmt.setTimestamp(index++, dto.getStartDate()==null ? null : new java.sql.Timestamp( dto.getStartDate().getTime() ) );
			stmt.setTimestamp(index++, dto.getFinishDate()==null ? null : new java.sql.Timestamp( dto.getFinishDate().getTime() ) );
			stmt.setString( index++, dto.getRoute() );
			stmt.setString( index++, dto.getProgramCode() );
			stmt.setString( index++, dto.getVersionCode() );
			stmt.setString( index++, dto.getStatusGroupNumber() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GroupNumberDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the group_number table.
	 */
	public void update(GroupNumberPk pk, GroupNumber dto) throws GroupNumberDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getGroupsNumber() );
			stmt.setTimestamp(index++, dto.getStartDate()==null ? null : new java.sql.Timestamp( dto.getStartDate().getTime() ) );
			stmt.setTimestamp(index++, dto.getFinishDate()==null ? null : new java.sql.Timestamp( dto.getFinishDate().getTime() ) );
			stmt.setString( index++, dto.getRoute() );
			stmt.setString( index++, dto.getProgramCode() );
			stmt.setString( index++, dto.getVersionCode() );
			stmt.setString( index++, dto.getStatusGroupNumber() );
			stmt.setString( 8, pk.getGroupsNumber() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GroupNumberDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the group_number table.
	 */
	public void delete(GroupNumberPk pk) throws GroupNumberDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getGroupsNumber() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GroupNumberDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the group_number table that matches the specified primary-key value.
	 */
	public GroupNumber findByPrimaryKey(GroupNumberPk pk) throws GroupNumberDaoException
	{
		return findByPrimaryKey( pk.getGroupsNumber() );
	}

	/** 
	 * Returns all rows from the group_number table that match the criteria 'groups_number = :groupsNumber'.
	 */
	public GroupNumber findByPrimaryKey(String groupsNumber) throws GroupNumberDaoException
	{
		GroupNumber ret[] = findByDynamicSelect( SQL_SELECT + " WHERE groups_number = ?", new Object[] { groupsNumber } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the group_number table that match the criteria ''.
	 */
	public GroupNumber[] findAll() throws GroupNumberDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY groups_number", null );
	}

	/** 
	 * Returns all rows from the group_number table that match the criteria 'program_code = :programCode AND version_code = :versionCode'.
	 */
	public GroupNumber[] findByProgram(String programCode, String versionCode) throws GroupNumberDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE program_code = ? AND version_code = ?", new Object[] { programCode, versionCode } );
	}

	/** 
	 * Returns all rows from the group_number table that match the criteria 'status_group_number = :statusGroupNumber'.
	 */
	public GroupNumber[] findByStatusGroupNumber(String statusGroupNumber) throws GroupNumberDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE status_group_number = ?", new Object[] { statusGroupNumber } );
	}

	/** 
	 * Returns all rows from the group_number table that match the criteria 'groups_number = :groupsNumber'.
	 */
	public GroupNumber[] findWhereGroupsNumberEquals(String groupsNumber) throws GroupNumberDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE groups_number = ? ORDER BY groups_number", new Object[] { groupsNumber } );
	}

	/** 
	 * Returns all rows from the group_number table that match the criteria 'start_date = :startDate'.
	 */
	public GroupNumber[] findWhereStartDateEquals(Date startDate) throws GroupNumberDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE start_date = ? ORDER BY start_date", new Object[] { startDate==null ? null : new java.sql.Timestamp( startDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the group_number table that match the criteria 'finish_date = :finishDate'.
	 */
	public GroupNumber[] findWhereFinishDateEquals(Date finishDate) throws GroupNumberDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE finish_date = ? ORDER BY finish_date", new Object[] { finishDate==null ? null : new java.sql.Timestamp( finishDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the group_number table that match the criteria 'route = :route'.
	 */
	public GroupNumber[] findWhereRouteEquals(String route) throws GroupNumberDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE route = ? ORDER BY route", new Object[] { route } );
	}

	/** 
	 * Returns all rows from the group_number table that match the criteria 'program_code = :programCode'.
	 */
	public GroupNumber[] findWhereProgramCodeEquals(String programCode) throws GroupNumberDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE program_code = ? ORDER BY program_code", new Object[] { programCode } );
	}

	/** 
	 * Returns all rows from the group_number table that match the criteria 'version_code = :versionCode'.
	 */
	public GroupNumber[] findWhereVersionCodeEquals(String versionCode) throws GroupNumberDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE version_code = ? ORDER BY version_code", new Object[] { versionCode } );
	}

	/** 
	 * Returns all rows from the group_number table that match the criteria 'status_group_number = :statusGroupNumber'.
	 */
	public GroupNumber[] findWhereStatusGroupNumberEquals(String statusGroupNumber) throws GroupNumberDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE status_group_number = ? ORDER BY status_group_number", new Object[] { statusGroupNumber } );
	}

	/**
	 * Method 'GroupNumberDaoImpl'
	 * 
	 */
	public GroupNumberDaoImpl()
	{
	}

	/**
	 * Method 'GroupNumberDaoImpl'
	 * 
	 * @param userConn
	 */
	public GroupNumberDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "joycd.group_number";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected GroupNumber fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			GroupNumber dto = new GroupNumber();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected GroupNumber[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			GroupNumber dto = new GroupNumber();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		GroupNumber ret[] = new GroupNumber[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(GroupNumber dto, ResultSet rs) throws SQLException
	{
		dto.setGroupsNumber( rs.getString( COLUMN_GROUPS_NUMBER ) );
		dto.setStartDate( rs.getTimestamp(COLUMN_START_DATE ) );
		dto.setFinishDate( rs.getTimestamp(COLUMN_FINISH_DATE ) );
		dto.setRoute( rs.getString( COLUMN_ROUTE ) );
		dto.setProgramCode( rs.getString( COLUMN_PROGRAM_CODE ) );
		dto.setVersionCode( rs.getString( COLUMN_VERSION_CODE ) );
		dto.setStatusGroupNumber( rs.getString( COLUMN_STATUS_GROUP_NUMBER ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(GroupNumber dto)
	{
	}

	/** 
	 * Returns all rows from the group_number table that match the specified arbitrary SQL statement
	 */
	public GroupNumber[] findByDynamicSelect(String sql, Object[] sqlParams) throws GroupNumberDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GroupNumberDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the group_number table that match the specified arbitrary SQL statement
	 */
	public GroupNumber[] findByDynamicWhere(String sql, Object[] sqlParams) throws GroupNumberDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GroupNumberDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
