/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.controler.dao.dao;

import co.edu.sena.controler.dao.dto.*;
import co.edu.sena.controler.dao.exceptions.*;

public interface InstructorDao
{
	/** 
	 * Inserts a new row in the instructor table.
	 */
	public InstructorPk insert(Instructor dto) throws InstructorDaoException;

	/** 
	 * Updates a single row in the instructor table.
	 */
	public void update(InstructorPk pk, Instructor dto) throws InstructorDaoException;

	/** 
	 * Deletes a single row in the instructor table.
	 */
	public void delete(InstructorPk pk) throws InstructorDaoException;

	/** 
	 * Returns the rows from the instructor table that matches the specified primary-key value.
	 */
	public Instructor findByPrimaryKey(InstructorPk pk) throws InstructorDaoException;

	/** 
	 * Returns all rows from the instructor table that match the criteria 'document_type = :documentType AND identification_card = :identificationCard'.
	 */
	public Instructor findByPrimaryKey(String documentType, String identificationCard) throws InstructorDaoException;

	/** 
	 * Returns all rows from the instructor table that match the criteria ''.
	 */
	public Instructor[] findAll() throws InstructorDaoException;

	/** 
	 * Returns all rows from the instructor table that match the criteria 'type_bonding = :typeBonding'.
	 */
	public Instructor[] findByBonding(String typeBonding) throws InstructorDaoException;

	/** 
	 * Returns all rows from the instructor table that match the criteria 'document_type = :documentType AND identification_card = :identificationCard'.
	 */
	public Instructor[] findByCustomer(String documentType, String identificationCard) throws InstructorDaoException;

	/** 
	 * Returns all rows from the instructor table that match the criteria 'name_speciality = :nameSpeciality'.
	 */
	public Instructor[] findBySpeciality(String nameSpeciality) throws InstructorDaoException;

	/** 
	 * Returns all rows from the instructor table that match the criteria 'document_type = :documentType'.
	 */
	public Instructor[] findWhereDocumentTypeEquals(String documentType) throws InstructorDaoException;

	/** 
	 * Returns all rows from the instructor table that match the criteria 'identification_card = :identificationCard'.
	 */
	public Instructor[] findWhereIdentificationCardEquals(String identificationCard) throws InstructorDaoException;

	/** 
	 * Returns all rows from the instructor table that match the criteria 'type_bonding = :typeBonding'.
	 */
	public Instructor[] findWhereTypeBondingEquals(String typeBonding) throws InstructorDaoException;

	/** 
	 * Returns all rows from the instructor table that match the criteria 'name_speciality = :nameSpeciality'.
	 */
	public Instructor[] findWhereNameSpecialityEquals(String nameSpeciality) throws InstructorDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the instructor table that match the specified arbitrary SQL statement
	 */
	public Instructor[] findByDynamicSelect(String sql, Object[] sqlParams) throws InstructorDaoException;

	/** 
	 * Returns all rows from the instructor table that match the specified arbitrary SQL statement
	 */
	public Instructor[] findByDynamicWhere(String sql, Object[] sqlParams) throws InstructorDaoException;

}
