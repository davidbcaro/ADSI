/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.controler.dao.dao;

import co.edu.sena.controler.dao.dto.*;
import co.edu.sena.controler.dao.exceptions.*;

public interface BondingDao
{
	/** 
	 * Inserts a new row in the bonding table.
	 */
	public BondingPk insert(Bonding dto) throws BondingDaoException;

	/** 
	 * Updates a single row in the bonding table.
	 */
	public void update(BondingPk pk, Bonding dto) throws BondingDaoException;

	/** 
	 * Deletes a single row in the bonding table.
	 */
	public void delete(BondingPk pk) throws BondingDaoException;

	/** 
	 * Returns the rows from the bonding table that matches the specified primary-key value.
	 */
	public Bonding findByPrimaryKey(BondingPk pk) throws BondingDaoException;

	/** 
	 * Returns all rows from the bonding table that match the criteria 'type_bonding = :typeBonding'.
	 */
	public Bonding findByPrimaryKey(String typeBonding) throws BondingDaoException;

	/** 
	 * Returns all rows from the bonding table that match the criteria ''.
	 */
	public Bonding[] findAll() throws BondingDaoException;

	/** 
	 * Returns all rows from the bonding table that match the criteria 'type_bonding = :typeBonding'.
	 */
	public Bonding[] findWhereTypeBondingEquals(String typeBonding) throws BondingDaoException;

	/** 
	 * Returns all rows from the bonding table that match the criteria 'hours = :hours'.
	 */
	public Bonding[] findWhereHoursEquals(int hours) throws BondingDaoException;

	/** 
	 * Returns all rows from the bonding table that match the criteria 'status = :status'.
	 */
	public Bonding[] findWhereStatusEquals(short status) throws BondingDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the bonding table that match the specified arbitrary SQL statement
	 */
	public Bonding[] findByDynamicSelect(String sql, Object[] sqlParams) throws BondingDaoException;

	/** 
	 * Returns all rows from the bonding table that match the specified arbitrary SQL statement
	 */
	public Bonding[] findByDynamicWhere(String sql, Object[] sqlParams) throws BondingDaoException;

}
