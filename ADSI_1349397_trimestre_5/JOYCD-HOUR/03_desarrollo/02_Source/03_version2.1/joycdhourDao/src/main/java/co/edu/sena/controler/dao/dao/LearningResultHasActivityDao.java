/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.controler.dao.dao;

import co.edu.sena.controler.dao.dto.*;
import co.edu.sena.controler.dao.exceptions.*;

public interface LearningResultHasActivityDao
{
	/** 
	 * Inserts a new row in the learning_result_has_activity table.
	 */
	public LearningResultHasActivityPk insert(LearningResultHasActivity dto) throws LearningResultHasActivityDaoException;

	/** 
	 * Updates a single row in the learning_result_has_activity table.
	 */
	public void update(LearningResultHasActivityPk pk, LearningResultHasActivity dto) throws LearningResultHasActivityDaoException;

	/** 
	 * Deletes a single row in the learning_result_has_activity table.
	 */
	public void delete(LearningResultHasActivityPk pk) throws LearningResultHasActivityDaoException;

	/** 
	 * Returns the rows from the learning_result_has_activity table that matches the specified primary-key value.
	 */
	public LearningResultHasActivity findByPrimaryKey(LearningResultHasActivityPk pk) throws LearningResultHasActivityDaoException;

	/** 
	 * Returns all rows from the learning_result_has_activity table that match the criteria 'learning_result_code = :learningResultCode AND program_code = :programCode AND competence_code = :competenceCode AND id_activity = :idActivity AND name_phase = :namePhase AND project_code = :projectCode'.
	 */
	public LearningResultHasActivity findByPrimaryKey(String learningResultCode, String programCode, String competenceCode, String idActivity, String namePhase, String projectCode) throws LearningResultHasActivityDaoException;

	/** 
	 * Returns all rows from the learning_result_has_activity table that match the criteria ''.
	 */
	public LearningResultHasActivity[] findAll() throws LearningResultHasActivityDaoException;

	/** 
	 * Returns all rows from the learning_result_has_activity table that match the criteria 'id_activity = :idActivity AND name_phase = :namePhase AND project_code = :projectCode'.
	 */
	public LearningResultHasActivity[] findByActivity(String idActivity, String namePhase, String projectCode) throws LearningResultHasActivityDaoException;

	/** 
	 * Returns all rows from the learning_result_has_activity table that match the criteria 'learning_result_code = :learningResultCode AND program_code = :programCode AND competence_code = :competenceCode AND version = :version'.
	 */
	public LearningResultHasActivity[] findByLearningResult(String learningResultCode, String programCode, String competenceCode, String version) throws LearningResultHasActivityDaoException;

	/** 
	 * Returns all rows from the learning_result_has_activity table that match the criteria 'learning_result_code = :learningResultCode'.
	 */
	public LearningResultHasActivity[] findWhereLearningResultCodeEquals(String learningResultCode) throws LearningResultHasActivityDaoException;

	/** 
	 * Returns all rows from the learning_result_has_activity table that match the criteria 'competence_code = :competenceCode'.
	 */
	public LearningResultHasActivity[] findWhereCompetenceCodeEquals(String competenceCode) throws LearningResultHasActivityDaoException;

	/** 
	 * Returns all rows from the learning_result_has_activity table that match the criteria 'program_code = :programCode'.
	 */
	public LearningResultHasActivity[] findWhereProgramCodeEquals(String programCode) throws LearningResultHasActivityDaoException;

	/** 
	 * Returns all rows from the learning_result_has_activity table that match the criteria 'id_activity = :idActivity'.
	 */
	public LearningResultHasActivity[] findWhereIdActivityEquals(String idActivity) throws LearningResultHasActivityDaoException;

	/** 
	 * Returns all rows from the learning_result_has_activity table that match the criteria 'name_phase = :namePhase'.
	 */
	public LearningResultHasActivity[] findWhereNamePhaseEquals(String namePhase) throws LearningResultHasActivityDaoException;

	/** 
	 * Returns all rows from the learning_result_has_activity table that match the criteria 'project_code = :projectCode'.
	 */
	public LearningResultHasActivity[] findWhereProjectCodeEquals(String projectCode) throws LearningResultHasActivityDaoException;

	/** 
	 * Returns all rows from the learning_result_has_activity table that match the criteria 'version = :version'.
	 */
	public LearningResultHasActivity[] findWhereVersionEquals(String version) throws LearningResultHasActivityDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the learning_result_has_activity table that match the specified arbitrary SQL statement
	 */
	public LearningResultHasActivity[] findByDynamicSelect(String sql, Object[] sqlParams) throws LearningResultHasActivityDaoException;

	/** 
	 * Returns all rows from the learning_result_has_activity table that match the specified arbitrary SQL statement
	 */
	public LearningResultHasActivity[] findByDynamicWhere(String sql, Object[] sqlParams) throws LearningResultHasActivityDaoException;

}
