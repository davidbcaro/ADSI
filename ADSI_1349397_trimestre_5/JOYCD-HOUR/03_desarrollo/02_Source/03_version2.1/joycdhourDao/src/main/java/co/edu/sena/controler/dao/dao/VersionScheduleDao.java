/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.controler.dao.dao;

import co.edu.sena.controler.dao.dto.*;
import co.edu.sena.controler.dao.exceptions.*;

public interface VersionScheduleDao
{
	/** 
	 * Inserts a new row in the version_schedule table.
	 */
	public VersionSchedulePk insert(VersionSchedule dto) throws VersionScheduleDaoException;

	/** 
	 * Updates a single row in the version_schedule table.
	 */
	public void update(VersionSchedulePk pk, VersionSchedule dto) throws VersionScheduleDaoException;

	/** 
	 * Deletes a single row in the version_schedule table.
	 */
	public void delete(VersionSchedulePk pk) throws VersionScheduleDaoException;

	/** 
	 * Returns the rows from the version_schedule table that matches the specified primary-key value.
	 */
	public VersionSchedule findByPrimaryKey(VersionSchedulePk pk) throws VersionScheduleDaoException;

	/** 
	 * Returns all rows from the version_schedule table that match the criteria 'version = :version AND actuality_trimester = :actualityTrimester'.
	 */
	public VersionSchedule findByPrimaryKey(int version, String actualityTrimester) throws VersionScheduleDaoException;

	/** 
	 * Returns all rows from the version_schedule table that match the criteria ''.
	 */
	public VersionSchedule[] findAll() throws VersionScheduleDaoException;

	/** 
	 * Returns all rows from the version_schedule table that match the criteria 'actuality_trimester = :actualityTrimester'.
	 */
	public VersionSchedule[] findByActualityTrimester(String actualityTrimester) throws VersionScheduleDaoException;

	/** 
	 * Returns all rows from the version_schedule table that match the criteria 'version = :version'.
	 */
	public VersionSchedule[] findWhereVersionEquals(int version) throws VersionScheduleDaoException;

	/** 
	 * Returns all rows from the version_schedule table that match the criteria 'status_version = :statusVersion'.
	 */
	public VersionSchedule[] findWhereStatusVersionEquals(short statusVersion) throws VersionScheduleDaoException;

	/** 
	 * Returns all rows from the version_schedule table that match the criteria 'actuality_trimester = :actualityTrimester'.
	 */
	public VersionSchedule[] findWhereActualityTrimesterEquals(String actualityTrimester) throws VersionScheduleDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the version_schedule table that match the specified arbitrary SQL statement
	 */
	public VersionSchedule[] findByDynamicSelect(String sql, Object[] sqlParams) throws VersionScheduleDaoException;

	/** 
	 * Returns all rows from the version_schedule table that match the specified arbitrary SQL statement
	 */
	public VersionSchedule[] findByDynamicWhere(String sql, Object[] sqlParams) throws VersionScheduleDaoException;

}
