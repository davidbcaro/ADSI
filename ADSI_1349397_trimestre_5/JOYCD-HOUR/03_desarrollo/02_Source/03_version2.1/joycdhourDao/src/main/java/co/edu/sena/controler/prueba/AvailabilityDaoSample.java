/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.controler.prueba;

import java.math.*;
import java.util.Date;
import java.util.Collection;
import co.edu.sena.controler.dao.dao.AvailabilityDao;
import co.edu.sena.controler.dao.dto.Availability;
import co.edu.sena.controler.dao.exceptions.AvailabilityDaoException;
import co.edu.sena.controler.dao.factory.AvailabilityDaoFactory;

public class AvailabilityDaoSample
{
	/**
	 * Method 'main'
	 * 
	 * @param arg
	 * @throws Exception
	 */
	public static void main(String[] arg) throws Exception
	{
		// Uncomment one of the lines below to test the generated code
		
		// findAll();
		// findByDay("");
		// findByInstructor("", "");
		// findByWorkingDay("");
		// findWhereHourStartEquals(null);
		// findWhereHourEndEquals(null);
		// findWhereDocumentTypeEquals("");
		// findWhereIdentificationCardEquals("");
		// findWhereNameDayEquals("");
		// findWhereWorkingDayInitialsEquals("");
	}

	/**
	 * Method 'findAll'
	 * 
	 */
	public static void findAll()
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findAll();
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findByDay'
	 * 
	 * @param nameDay
	 */
	public static void findByDay(String nameDay)
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findByDay(nameDay);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findByInstructor'
	 * 
	 * @param documentType
	 * @param identificationCard
	 */
	public static void findByInstructor(String documentType, String identificationCard)
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findByInstructor(documentType, identificationCard);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findByWorkingDay'
	 * 
	 * @param workingDayInitials
	 */
	public static void findByWorkingDay(String workingDayInitials)
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findByWorkingDay(workingDayInitials);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereHourStartEquals'
	 * 
	 * @param hourStart
	 */
	public static void findWhereHourStartEquals(Date hourStart)
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findWhereHourStartEquals(hourStart);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereHourEndEquals'
	 * 
	 * @param hourEnd
	 */
	public static void findWhereHourEndEquals(Date hourEnd)
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findWhereHourEndEquals(hourEnd);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereDocumentTypeEquals'
	 * 
	 * @param documentType
	 */
	public static void findWhereDocumentTypeEquals(String documentType)
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findWhereDocumentTypeEquals(documentType);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereIdentificationCardEquals'
	 * 
	 * @param identificationCard
	 */
	public static void findWhereIdentificationCardEquals(String identificationCard)
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findWhereIdentificationCardEquals(identificationCard);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereNameDayEquals'
	 * 
	 * @param nameDay
	 */
	public static void findWhereNameDayEquals(String nameDay)
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findWhereNameDayEquals(nameDay);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereWorkingDayInitialsEquals'
	 * 
	 * @param workingDayInitials
	 */
	public static void findWhereWorkingDayInitialsEquals(String workingDayInitials)
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findWhereWorkingDayInitialsEquals(workingDayInitials);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'getAvailabilityDao'
	 * 
	 * @return AvailabilityDao
	 */
	public static AvailabilityDao getAvailabilityDao()
	{
		return AvailabilityDaoFactory.create();
	}

	/**
	 * Method 'display'
	 * 
	 * @param dto
	 */
	public static void display(Availability dto)
	{
		StringBuffer buf = new StringBuffer();
		buf.append( dto.getHourStart() );
		buf.append( ", " );
		buf.append( dto.getHourEnd() );
		buf.append( ", " );
		buf.append( dto.getDocumentType() );
		buf.append( ", " );
		buf.append( dto.getIdentificationCard() );
		buf.append( ", " );
		buf.append( dto.getNameDay() );
		buf.append( ", " );
		buf.append( dto.getWorkingDayInitials() );
		System.out.println( buf.toString() );
	}

}
