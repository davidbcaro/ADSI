/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.model.dao.dao;

import co.edu.sena.model.dao.dto.*;
import co.edu.sena.model.dao.exceptions.*;

public interface ProjectDao
{
	/** 
	 * Inserts a new row in the project table.
	 */
	public ProjectPk insert(Project dto) throws ProjectDaoException;

	/** 
	 * Updates a single row in the project table.
	 */
	public void update(ProjectPk pk, Project dto) throws ProjectDaoException;

	/** 
	 * Deletes a single row in the project table.
	 */
	public void delete(ProjectPk pk) throws ProjectDaoException;

	/** 
	 * Returns the rows from the project table that matches the specified primary-key value.
	 */
	public Project findByPrimaryKey(ProjectPk pk) throws ProjectDaoException;

	/** 
	 * Returns all rows from the project table that match the criteria 'project_Code = :projectCode'.
	 */
	public Project findByPrimaryKey(String projectCode) throws ProjectDaoException;

	/** 
	 * Returns all rows from the project table that match the criteria ''.
	 */
	public Project[] findAll() throws ProjectDaoException;

	/** 
	 * Returns all rows from the project table that match the criteria 'project_Code = :projectCode'.
	 */
	public Project[] findWhereProjectCodeEquals(String projectCode) throws ProjectDaoException;

	/** 
	 * Returns all rows from the project table that match the criteria 'name_project = :nameProject'.
	 */
	public Project[] findWhereNameProjectEquals(String nameProject) throws ProjectDaoException;

	/** 
	 * Returns all rows from the project table that match the criteria 'state = :state'.
	 */
	public Project[] findWhereStateEquals(short state) throws ProjectDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the project table that match the specified arbitrary SQL statement
	 */
	public Project[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProjectDaoException;

	/** 
	 * Returns all rows from the project table that match the specified arbitrary SQL statement
	 */
	public Project[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProjectDaoException;

}
