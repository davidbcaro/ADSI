/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.model.dao.dao;

import co.edu.sena.model.dao.dto.*;
import co.edu.sena.model.dao.exceptions.*;

public interface LearningOutcomeDao
{
	/** 
	 * Inserts a new row in the learning_outcome table.
	 */
	public LearningOutcomePk insert(LearningOutcome dto) throws LearningOutcomeDaoException;

	/** 
	 * Updates a single row in the learning_outcome table.
	 */
	public void update(LearningOutcomePk pk, LearningOutcome dto) throws LearningOutcomeDaoException;

	/** 
	 * Deletes a single row in the learning_outcome table.
	 */
	public void delete(LearningOutcomePk pk) throws LearningOutcomeDaoException;

	/** 
	 * Returns the rows from the learning_outcome table that matches the specified primary-key value.
	 */
	public LearningOutcome findByPrimaryKey(LearningOutcomePk pk) throws LearningOutcomeDaoException;

	/** 
	 * Returns all rows from the learning_outcome table that match the criteria 'l_Outcome_Code = :lOutcomeCode AND competition_Code = :competitionCode AND program_Code = :programCode AND version = :version'.
	 */
	public LearningOutcome findByPrimaryKey(String lOutcomeCode, String competitionCode, String programCode, String version) throws LearningOutcomeDaoException;

	/** 
	 * Returns all rows from the learning_outcome table that match the criteria ''.
	 */
	public LearningOutcome[] findAll() throws LearningOutcomeDaoException;

	/** 
	 * Returns all rows from the learning_outcome table that match the criteria 'competition_Code = :competitionCode AND program_Code = :programCode AND version = :version'.
	 */
	public LearningOutcome[] findByCompetition(String competitionCode, String programCode, String version) throws LearningOutcomeDaoException;

	/** 
	 * Returns all rows from the learning_outcome table that match the criteria 'l_Outcome_Code = :lOutcomeCode'.
	 */
	public LearningOutcome[] findWhereLOutcomeCodeEquals(String lOutcomeCode) throws LearningOutcomeDaoException;

	/** 
	 * Returns all rows from the learning_outcome table that match the criteria 'description = :description'.
	 */
	public LearningOutcome[] findWhereDescriptionEquals(String description) throws LearningOutcomeDaoException;

	/** 
	 * Returns all rows from the learning_outcome table that match the criteria 'competition_Code = :competitionCode'.
	 */
	public LearningOutcome[] findWhereCompetitionCodeEquals(String competitionCode) throws LearningOutcomeDaoException;

	/** 
	 * Returns all rows from the learning_outcome table that match the criteria 'program_Code = :programCode'.
	 */
	public LearningOutcome[] findWhereProgramCodeEquals(String programCode) throws LearningOutcomeDaoException;

	/** 
	 * Returns all rows from the learning_outcome table that match the criteria 'version = :version'.
	 */
	public LearningOutcome[] findWhereVersionEquals(String version) throws LearningOutcomeDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the learning_outcome table that match the specified arbitrary SQL statement
	 */
	public LearningOutcome[] findByDynamicSelect(String sql, Object[] sqlParams) throws LearningOutcomeDaoException;

	/** 
	 * Returns all rows from the learning_outcome table that match the specified arbitrary SQL statement
	 */
	public LearningOutcome[] findByDynamicWhere(String sql, Object[] sqlParams) throws LearningOutcomeDaoException;

}
