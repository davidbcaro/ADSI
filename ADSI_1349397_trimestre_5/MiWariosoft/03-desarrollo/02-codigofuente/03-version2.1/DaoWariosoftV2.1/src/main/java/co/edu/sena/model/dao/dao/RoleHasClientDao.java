/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.model.dao.dao;

import co.edu.sena.model.dao.dto.*;
import co.edu.sena.model.dao.exceptions.*;

public interface RoleHasClientDao
{
	/** 
	 * Inserts a new row in the role_has_client table.
	 */
	public RoleHasClientPk insert(RoleHasClient dto) throws RoleHasClientDaoException;

	/** 
	 * Updates a single row in the role_has_client table.
	 */
	public void update(RoleHasClientPk pk, RoleHasClient dto) throws RoleHasClientDaoException;

	/** 
	 * Deletes a single row in the role_has_client table.
	 */
	public void delete(RoleHasClientPk pk) throws RoleHasClientDaoException;

	/** 
	 * Returns the rows from the role_has_client table that matches the specified primary-key value.
	 */
	public RoleHasClient findByPrimaryKey(RoleHasClientPk pk) throws RoleHasClientDaoException;

	/** 
	 * Returns all rows from the role_has_client table that match the criteria 'id_Document = :idDocument AND document_Number = :documentNumber AND id_Role = :idRole'.
	 */
	public RoleHasClient findByPrimaryKey(String idDocument, String documentNumber, String idRole) throws RoleHasClientDaoException;

	/** 
	 * Returns all rows from the role_has_client table that match the criteria ''.
	 */
	public RoleHasClient[] findAll() throws RoleHasClientDaoException;

	/** 
	 * Returns all rows from the role_has_client table that match the criteria 'id_Role = :idRole'.
	 */
	public RoleHasClient[] findByRole(String idRole) throws RoleHasClientDaoException;

	/** 
	 * Returns all rows from the role_has_client table that match the criteria 'id_Document = :idDocument AND document_Number = :documentNumber'.
	 */
	public RoleHasClient[] findByClient(String idDocument, String documentNumber) throws RoleHasClientDaoException;

	/** 
	 * Returns all rows from the role_has_client table that match the criteria 'id_Document = :idDocument'.
	 */
	public RoleHasClient[] findWhereIdDocumentEquals(String idDocument) throws RoleHasClientDaoException;

	/** 
	 * Returns all rows from the role_has_client table that match the criteria 'document_Number = :documentNumber'.
	 */
	public RoleHasClient[] findWhereDocumentNumberEquals(String documentNumber) throws RoleHasClientDaoException;

	/** 
	 * Returns all rows from the role_has_client table that match the criteria 'id_Role = :idRole'.
	 */
	public RoleHasClient[] findWhereIdRoleEquals(String idRole) throws RoleHasClientDaoException;

	/** 
	 * Returns all rows from the role_has_client table that match the criteria 'state = :state'.
	 */
	public RoleHasClient[] findWhereStateEquals(short state) throws RoleHasClientDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the role_has_client table that match the specified arbitrary SQL statement
	 */
	public RoleHasClient[] findByDynamicSelect(String sql, Object[] sqlParams) throws RoleHasClientDaoException;

	/** 
	 * Returns all rows from the role_has_client table that match the specified arbitrary SQL statement
	 */
	public RoleHasClient[] findByDynamicWhere(String sql, Object[] sqlParams) throws RoleHasClientDaoException;

}
