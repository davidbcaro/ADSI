/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.model.dao.dao;

import co.edu.sena.model.dao.dto.*;
import co.edu.sena.model.dao.exceptions.*;

public interface ScheduleDao
{
	/** 
	 * Inserts a new row in the schedule table.
	 */
	public SchedulePk insert(Schedule dto) throws ScheduleDaoException;

	/** 
	 * Updates a single row in the schedule table.
	 */
	public void update(SchedulePk pk, Schedule dto) throws ScheduleDaoException;

	/** 
	 * Deletes a single row in the schedule table.
	 */
	public void delete(SchedulePk pk) throws ScheduleDaoException;

	/** 
	 * Returns the rows from the schedule table that matches the specified primary-key value.
	 */
	public Schedule findByPrimaryKey(SchedulePk pk) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'id_Document = :idDocument AND document_Number = :documentNumber AND name_Modality = :nameModality AND number_Environment = :numberEnvironment AND name_Headquarters = :nameHeadquarters AND id_Version = :idVersion AND id_Current_Quarter = :idCurrentQuarter AND name_Day = :nameDay AND number_Group = :numberGroup AND name_Trimester = :nameTrimester AND initials_Working_Day = :initialsWorkingDay'.
	 */
	public Schedule findByPrimaryKey(String idDocument, String documentNumber, String nameModality, String numberEnvironment, String nameHeadquarters, int idVersion, String idCurrentQuarter, String nameDay, String numberGroup, String nameTrimester, String initialsWorkingDay) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria ''.
	 */
	public Schedule[] findAll() throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_Day = :nameDay'.
	 */
	public Schedule[] findByDay(String nameDay) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'number_Environment = :numberEnvironment AND name_Headquarters = :nameHeadquarters'.
	 */
	public Schedule[] findByEnvironment(String numberEnvironment, String nameHeadquarters) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_Modality = :nameModality'.
	 */
	public Schedule[] findByModality(String nameModality) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'number_Group = :numberGroup AND name_Trimester = :nameTrimester AND initials_Working_Day = :initialsWorkingDay'.
	 */
	public Schedule[] findByNumberGroupHasTrimester(String numberGroup, String nameTrimester, String initialsWorkingDay) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'id_Document = :idDocument AND document_Number = :documentNumber'.
	 */
	public Schedule[] findByTeacher(String idDocument, String documentNumber) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'id_Version = :idVersion AND id_Current_Quarter = :idCurrentQuarter'.
	 */
	public Schedule[] findByVersion(int idVersion, String idCurrentQuarter) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'start_Time = :startTime'.
	 */
	public Schedule[] findWhereStartTimeEquals(String startTime) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'end_Time = :endTime'.
	 */
	public Schedule[] findWhereEndTimeEquals(String endTime) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_Trimester = :nameTrimester'.
	 */
	public Schedule[] findWhereNameTrimesterEquals(String nameTrimester) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'number_Group = :numberGroup'.
	 */
	public Schedule[] findWhereNumberGroupEquals(String numberGroup) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'initials_Working_Day = :initialsWorkingDay'.
	 */
	public Schedule[] findWhereInitialsWorkingDayEquals(String initialsWorkingDay) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'document_Number = :documentNumber'.
	 */
	public Schedule[] findWhereDocumentNumberEquals(String documentNumber) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'id_Document = :idDocument'.
	 */
	public Schedule[] findWhereIdDocumentEquals(String idDocument) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_Day = :nameDay'.
	 */
	public Schedule[] findWhereNameDayEquals(String nameDay) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_Modality = :nameModality'.
	 */
	public Schedule[] findWhereNameModalityEquals(String nameModality) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'number_Environment = :numberEnvironment'.
	 */
	public Schedule[] findWhereNumberEnvironmentEquals(String numberEnvironment) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'name_Headquarters = :nameHeadquarters'.
	 */
	public Schedule[] findWhereNameHeadquartersEquals(String nameHeadquarters) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'id_Version = :idVersion'.
	 */
	public Schedule[] findWhereIdVersionEquals(int idVersion) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the criteria 'id_Current_Quarter = :idCurrentQuarter'.
	 */
	public Schedule[] findWhereIdCurrentQuarterEquals(String idCurrentQuarter) throws ScheduleDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the schedule table that match the specified arbitrary SQL statement
	 */
	public Schedule[] findByDynamicSelect(String sql, Object[] sqlParams) throws ScheduleDaoException;

	/** 
	 * Returns all rows from the schedule table that match the specified arbitrary SQL statement
	 */
	public Schedule[] findByDynamicWhere(String sql, Object[] sqlParams) throws ScheduleDaoException;

}
