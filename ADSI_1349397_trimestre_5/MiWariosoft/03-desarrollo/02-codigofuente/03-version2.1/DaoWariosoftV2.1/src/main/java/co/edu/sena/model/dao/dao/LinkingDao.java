/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.model.dao.dao;

import co.edu.sena.model.dao.dto.*;
import co.edu.sena.model.dao.exceptions.*;

public interface LinkingDao
{
	/** 
	 * Inserts a new row in the linking table.
	 */
	public LinkingPk insert(Linking dto) throws LinkingDaoException;

	/** 
	 * Updates a single row in the linking table.
	 */
	public void update(LinkingPk pk, Linking dto) throws LinkingDaoException;

	/** 
	 * Deletes a single row in the linking table.
	 */
	public void delete(LinkingPk pk) throws LinkingDaoException;

	/** 
	 * Returns the rows from the linking table that matches the specified primary-key value.
	 */
	public Linking findByPrimaryKey(LinkingPk pk) throws LinkingDaoException;

	/** 
	 * Returns all rows from the linking table that match the criteria 'type_Linking = :typeLinking'.
	 */
	public Linking findByPrimaryKey(String typeLinking) throws LinkingDaoException;

	/** 
	 * Returns all rows from the linking table that match the criteria ''.
	 */
	public Linking[] findAll() throws LinkingDaoException;

	/** 
	 * Returns all rows from the linking table that match the criteria 'type_Linking = :typeLinking'.
	 */
	public Linking[] findWhereTypeLinkingEquals(String typeLinking) throws LinkingDaoException;

	/** 
	 * Returns all rows from the linking table that match the criteria 'hours = :hours'.
	 */
	public Linking[] findWhereHoursEquals(int hours) throws LinkingDaoException;

	/** 
	 * Returns all rows from the linking table that match the criteria 'state = :state'.
	 */
	public Linking[] findWhereStateEquals(short state) throws LinkingDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the linking table that match the specified arbitrary SQL statement
	 */
	public Linking[] findByDynamicSelect(String sql, Object[] sqlParams) throws LinkingDaoException;

	/** 
	 * Returns all rows from the linking table that match the specified arbitrary SQL statement
	 */
	public Linking[] findByDynamicWhere(String sql, Object[] sqlParams) throws LinkingDaoException;

}
