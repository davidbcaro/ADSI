/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.model.dao.dao;

import co.edu.sena.model.dao.dto.*;
import co.edu.sena.model.dao.exceptions.*;

public interface DocumentDao
{
	/** 
	 * Inserts a new row in the document table.
	 */
	public DocumentPk insert(Document dto) throws DocumentDaoException;

	/** 
	 * Updates a single row in the document table.
	 */
	public void update(DocumentPk pk, Document dto) throws DocumentDaoException;

	/** 
	 * Deletes a single row in the document table.
	 */
	public void delete(DocumentPk pk) throws DocumentDaoException;

	/** 
	 * Returns the rows from the document table that matches the specified primary-key value.
	 */
	public Document findByPrimaryKey(DocumentPk pk) throws DocumentDaoException;

	/** 
	 * Returns all rows from the document table that match the criteria 'id_Document = :idDocument'.
	 */
	public Document findByPrimaryKey(String idDocument) throws DocumentDaoException;

	/** 
	 * Returns all rows from the document table that match the criteria ''.
	 */
	public Document[] findAll() throws DocumentDaoException;

	/** 
	 * Returns all rows from the document table that match the criteria 'id_Document = :idDocument'.
	 */
	public Document[] findWhereIdDocumentEquals(String idDocument) throws DocumentDaoException;

	/** 
	 * Returns all rows from the document table that match the criteria 'name = :name'.
	 */
	public Document[] findWhereNameEquals(String name) throws DocumentDaoException;

	/** 
	 * Returns all rows from the document table that match the criteria 'state = :state'.
	 */
	public Document[] findWhereStateEquals(short state) throws DocumentDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the document table that match the specified arbitrary SQL statement
	 */
	public Document[] findByDynamicSelect(String sql, Object[] sqlParams) throws DocumentDaoException;

	/** 
	 * Returns all rows from the document table that match the specified arbitrary SQL statement
	 */
	public Document[] findByDynamicWhere(String sql, Object[] sqlParams) throws DocumentDaoException;

}
