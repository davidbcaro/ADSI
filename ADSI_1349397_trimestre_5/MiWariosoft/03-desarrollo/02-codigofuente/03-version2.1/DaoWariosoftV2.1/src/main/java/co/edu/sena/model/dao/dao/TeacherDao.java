/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.model.dao.dao;

import co.edu.sena.model.dao.dto.*;
import co.edu.sena.model.dao.exceptions.*;

public interface TeacherDao
{
	/** 
	 * Inserts a new row in the teacher table.
	 */
	public TeacherPk insert(Teacher dto) throws TeacherDaoException;

	/** 
	 * Updates a single row in the teacher table.
	 */
	public void update(TeacherPk pk, Teacher dto) throws TeacherDaoException;

	/** 
	 * Deletes a single row in the teacher table.
	 */
	public void delete(TeacherPk pk) throws TeacherDaoException;

	/** 
	 * Returns the rows from the teacher table that matches the specified primary-key value.
	 */
	public Teacher findByPrimaryKey(TeacherPk pk) throws TeacherDaoException;

	/** 
	 * Returns all rows from the teacher table that match the criteria 'id_Document = :idDocument AND document_Number = :documentNumber'.
	 */
	public Teacher findByPrimaryKey(String idDocument, String documentNumber) throws TeacherDaoException;

	/** 
	 * Returns all rows from the teacher table that match the criteria ''.
	 */
	public Teacher[] findAll() throws TeacherDaoException;

	/** 
	 * Returns all rows from the teacher table that match the criteria 'id_Document = :idDocument AND document_Number = :documentNumber'.
	 */
	public Teacher[] findByClient(String idDocument, String documentNumber) throws TeacherDaoException;

	/** 
	 * Returns all rows from the teacher table that match the criteria 'name_Specialty = :nameSpecialty'.
	 */
	public Teacher[] findBySpecialty(String nameSpecialty) throws TeacherDaoException;

	/** 
	 * Returns all rows from the teacher table that match the criteria 'type_Linking = :typeLinking'.
	 */
	public Teacher[] findByLinking(String typeLinking) throws TeacherDaoException;

	/** 
	 * Returns all rows from the teacher table that match the criteria 'id_Document = :idDocument'.
	 */
	public Teacher[] findWhereIdDocumentEquals(String idDocument) throws TeacherDaoException;

	/** 
	 * Returns all rows from the teacher table that match the criteria 'document_Number = :documentNumber'.
	 */
	public Teacher[] findWhereDocumentNumberEquals(String documentNumber) throws TeacherDaoException;

	/** 
	 * Returns all rows from the teacher table that match the criteria 'type_Linking = :typeLinking'.
	 */
	public Teacher[] findWhereTypeLinkingEquals(String typeLinking) throws TeacherDaoException;

	/** 
	 * Returns all rows from the teacher table that match the criteria 'name_Specialty = :nameSpecialty'.
	 */
	public Teacher[] findWhereNameSpecialtyEquals(String nameSpecialty) throws TeacherDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the teacher table that match the specified arbitrary SQL statement
	 */
	public Teacher[] findByDynamicSelect(String sql, Object[] sqlParams) throws TeacherDaoException;

	/** 
	 * Returns all rows from the teacher table that match the specified arbitrary SQL statement
	 */
	public Teacher[] findByDynamicWhere(String sql, Object[] sqlParams) throws TeacherDaoException;

}
