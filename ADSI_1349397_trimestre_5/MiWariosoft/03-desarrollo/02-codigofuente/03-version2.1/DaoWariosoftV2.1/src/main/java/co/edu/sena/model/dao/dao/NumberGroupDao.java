/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.model.dao.dao;

import java.util.Date;
import co.edu.sena.model.dao.dto.*;
import co.edu.sena.model.dao.exceptions.*;

public interface NumberGroupDao
{
	/** 
	 * Inserts a new row in the number_group table.
	 */
	public NumberGroupPk insert(NumberGroup dto) throws NumberGroupDaoException;

	/** 
	 * Updates a single row in the number_group table.
	 */
	public void update(NumberGroupPk pk, NumberGroup dto) throws NumberGroupDaoException;

	/** 
	 * Deletes a single row in the number_group table.
	 */
	public void delete(NumberGroupPk pk) throws NumberGroupDaoException;

	/** 
	 * Returns the rows from the number_group table that matches the specified primary-key value.
	 */
	public NumberGroup findByPrimaryKey(NumberGroupPk pk) throws NumberGroupDaoException;

	/** 
	 * Returns all rows from the number_group table that match the criteria 'number_Group = :numberGroup AND version = :version'.
	 */
	public NumberGroup findByPrimaryKey(String numberGroup, String version) throws NumberGroupDaoException;

	/** 
	 * Returns all rows from the number_group table that match the criteria ''.
	 */
	public NumberGroup[] findAll() throws NumberGroupDaoException;

	/** 
	 * Returns all rows from the number_group table that match the criteria 'program_Code = :programCode AND version = :version'.
	 */
	public NumberGroup[] findByProgram(String programCode, String version) throws NumberGroupDaoException;

	/** 
	 * Returns all rows from the number_group table that match the criteria 'name_State = :nameState'.
	 */
	public NumberGroup[] findByStateNumberGroup(String nameState) throws NumberGroupDaoException;

	/** 
	 * Returns all rows from the number_group table that match the criteria 'number_Group = :numberGroup'.
	 */
	public NumberGroup[] findWhereNumberGroupEquals(String numberGroup) throws NumberGroupDaoException;

	/** 
	 * Returns all rows from the number_group table that match the criteria 'start_Date = :startDate'.
	 */
	public NumberGroup[] findWhereStartDateEquals(Date startDate) throws NumberGroupDaoException;

	/** 
	 * Returns all rows from the number_group table that match the criteria 'end_Date = :endDate'.
	 */
	public NumberGroup[] findWhereEndDateEquals(Date endDate) throws NumberGroupDaoException;

	/** 
	 * Returns all rows from the number_group table that match the criteria 'route = :route'.
	 */
	public NumberGroup[] findWhereRouteEquals(String route) throws NumberGroupDaoException;

	/** 
	 * Returns all rows from the number_group table that match the criteria 'name_State = :nameState'.
	 */
	public NumberGroup[] findWhereNameStateEquals(String nameState) throws NumberGroupDaoException;

	/** 
	 * Returns all rows from the number_group table that match the criteria 'program_Code = :programCode'.
	 */
	public NumberGroup[] findWhereProgramCodeEquals(String programCode) throws NumberGroupDaoException;

	/** 
	 * Returns all rows from the number_group table that match the criteria 'version = :version'.
	 */
	public NumberGroup[] findWhereVersionEquals(String version) throws NumberGroupDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the number_group table that match the specified arbitrary SQL statement
	 */
	public NumberGroup[] findByDynamicSelect(String sql, Object[] sqlParams) throws NumberGroupDaoException;

	/** 
	 * Returns all rows from the number_group table that match the specified arbitrary SQL statement
	 */
	public NumberGroup[] findByDynamicWhere(String sql, Object[] sqlParams) throws NumberGroupDaoException;

}
