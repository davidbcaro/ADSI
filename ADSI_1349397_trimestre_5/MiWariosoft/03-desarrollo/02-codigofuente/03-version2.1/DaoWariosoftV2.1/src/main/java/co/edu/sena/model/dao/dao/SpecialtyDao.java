/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.model.dao.dao;

import co.edu.sena.model.dao.dto.*;
import co.edu.sena.model.dao.exceptions.*;

public interface SpecialtyDao
{
	/** 
	 * Inserts a new row in the specialty table.
	 */
	public SpecialtyPk insert(Specialty dto) throws SpecialtyDaoException;

	/** 
	 * Updates a single row in the specialty table.
	 */
	public void update(SpecialtyPk pk, Specialty dto) throws SpecialtyDaoException;

	/** 
	 * Deletes a single row in the specialty table.
	 */
	public void delete(SpecialtyPk pk) throws SpecialtyDaoException;

	/** 
	 * Returns the rows from the specialty table that matches the specified primary-key value.
	 */
	public Specialty findByPrimaryKey(SpecialtyPk pk) throws SpecialtyDaoException;

	/** 
	 * Returns all rows from the specialty table that match the criteria 'name_Specialty = :nameSpecialty'.
	 */
	public Specialty findByPrimaryKey(String nameSpecialty) throws SpecialtyDaoException;

	/** 
	 * Returns all rows from the specialty table that match the criteria ''.
	 */
	public Specialty[] findAll() throws SpecialtyDaoException;

	/** 
	 * Returns all rows from the specialty table that match the criteria 'name_Specialty = :nameSpecialty'.
	 */
	public Specialty[] findWhereNameSpecialtyEquals(String nameSpecialty) throws SpecialtyDaoException;

	/** 
	 * Returns all rows from the specialty table that match the criteria 'state = :state'.
	 */
	public Specialty[] findWhereStateEquals(short state) throws SpecialtyDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the specialty table that match the specified arbitrary SQL statement
	 */
	public Specialty[] findByDynamicSelect(String sql, Object[] sqlParams) throws SpecialtyDaoException;

	/** 
	 * Returns all rows from the specialty table that match the specified arbitrary SQL statement
	 */
	public Specialty[] findByDynamicWhere(String sql, Object[] sqlParams) throws SpecialtyDaoException;

}
