/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.model.dao.dao;

import co.edu.sena.model.dao.dto.*;
import co.edu.sena.model.dao.exceptions.*;

public interface CompetitionDao
{
	/** 
	 * Inserts a new row in the competition table.
	 */
	public CompetitionPk insert(Competition dto) throws CompetitionDaoException;

	/** 
	 * Updates a single row in the competition table.
	 */
	public void update(CompetitionPk pk, Competition dto) throws CompetitionDaoException;

	/** 
	 * Deletes a single row in the competition table.
	 */
	public void delete(CompetitionPk pk) throws CompetitionDaoException;

	/** 
	 * Returns the rows from the competition table that matches the specified primary-key value.
	 */
	public Competition findByPrimaryKey(CompetitionPk pk) throws CompetitionDaoException;

	/** 
	 * Returns all rows from the competition table that match the criteria 'competition_Code = :competitionCode AND program_Code = :programCode AND version = :version'.
	 */
	public Competition findByPrimaryKey(String competitionCode, String programCode, String version) throws CompetitionDaoException;

	/** 
	 * Returns all rows from the competition table that match the criteria ''.
	 */
	public Competition[] findAll() throws CompetitionDaoException;

	/** 
	 * Returns all rows from the competition table that match the criteria 'program_Code = :programCode AND version = :version'.
	 */
	public Competition[] findByProgram(String programCode, String version) throws CompetitionDaoException;

	/** 
	 * Returns all rows from the competition table that match the criteria 'competition_Code = :competitionCode'.
	 */
	public Competition[] findWhereCompetitionCodeEquals(String competitionCode) throws CompetitionDaoException;

	/** 
	 * Returns all rows from the competition table that match the criteria 'description = :description'.
	 */
	public Competition[] findWhereDescriptionEquals(String description) throws CompetitionDaoException;

	/** 
	 * Returns all rows from the competition table that match the criteria 'program_Code = :programCode'.
	 */
	public Competition[] findWhereProgramCodeEquals(String programCode) throws CompetitionDaoException;

	/** 
	 * Returns all rows from the competition table that match the criteria 'version = :version'.
	 */
	public Competition[] findWhereVersionEquals(String version) throws CompetitionDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the competition table that match the specified arbitrary SQL statement
	 */
	public Competition[] findByDynamicSelect(String sql, Object[] sqlParams) throws CompetitionDaoException;

	/** 
	 * Returns all rows from the competition table that match the specified arbitrary SQL statement
	 */
	public Competition[] findByDynamicWhere(String sql, Object[] sqlParams) throws CompetitionDaoException;

}
