/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.model.dao.dao;

import java.util.Date;
import co.edu.sena.model.dao.dto.*;
import co.edu.sena.model.dao.exceptions.*;

public interface LogAuditDao
{
	/** 
	 * Inserts a new row in the log_audit table.
	 */
	public LogAuditPk insert(LogAudit dto) throws LogAuditDaoException;

	/** 
	 * Updates a single row in the log_audit table.
	 */
	public void update(LogAuditPk pk, LogAudit dto) throws LogAuditDaoException;

	/** 
	 * Deletes a single row in the log_audit table.
	 */
	public void delete(LogAuditPk pk) throws LogAuditDaoException;

	/** 
	 * Returns the rows from the log_audit table that matches the specified primary-key value.
	 */
	public LogAudit findByPrimaryKey(LogAuditPk pk) throws LogAuditDaoException;

	/** 
	 * Returns all rows from the log_audit table that match the criteria 'id_Log = :idLog'.
	 */
	public LogAudit findByPrimaryKey(long idLog) throws LogAuditDaoException;

	/** 
	 * Returns all rows from the log_audit table that match the criteria ''.
	 */
	public LogAudit[] findAll() throws LogAuditDaoException;

	/** 
	 * Returns all rows from the log_audit table that match the criteria 'id_Log = :idLog'.
	 */
	public LogAudit[] findWhereIdLogEquals(long idLog) throws LogAuditDaoException;

	/** 
	 * Returns all rows from the log_audit table that match the criteria 'level = :level'.
	 */
	public LogAudit[] findWhereLevelEquals(String level) throws LogAuditDaoException;

	/** 
	 * Returns all rows from the log_audit table that match the criteria 'log_Name = :logName'.
	 */
	public LogAudit[] findWhereLogNameEquals(String logName) throws LogAuditDaoException;

	/** 
	 * Returns all rows from the log_audit table that match the criteria 'message = :message'.
	 */
	public LogAudit[] findWhereMessageEquals(String message) throws LogAuditDaoException;

	/** 
	 * Returns all rows from the log_audit table that match the criteria 'date = :date'.
	 */
	public LogAudit[] findWhereDateEquals(Date date) throws LogAuditDaoException;

	/** 
	 * Returns all rows from the log_audit table that match the criteria 'user = :user'.
	 */
	public LogAudit[] findWhereUserEquals(String user) throws LogAuditDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the log_audit table that match the specified arbitrary SQL statement
	 */
	public LogAudit[] findByDynamicSelect(String sql, Object[] sqlParams) throws LogAuditDaoException;

	/** 
	 * Returns all rows from the log_audit table that match the specified arbitrary SQL statement
	 */
	public LogAudit[] findByDynamicWhere(String sql, Object[] sqlParams) throws LogAuditDaoException;

}
