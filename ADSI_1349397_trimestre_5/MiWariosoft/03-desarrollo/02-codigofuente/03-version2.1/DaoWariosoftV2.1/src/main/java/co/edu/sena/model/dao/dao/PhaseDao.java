/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.model.dao.dao;

import co.edu.sena.model.dao.dto.*;
import co.edu.sena.model.dao.exceptions.*;

public interface PhaseDao
{
	/** 
	 * Inserts a new row in the phase table.
	 */
	public PhasePk insert(Phase dto) throws PhaseDaoException;

	/** 
	 * Updates a single row in the phase table.
	 */
	public void update(PhasePk pk, Phase dto) throws PhaseDaoException;

	/** 
	 * Deletes a single row in the phase table.
	 */
	public void delete(PhasePk pk) throws PhaseDaoException;

	/** 
	 * Returns the rows from the phase table that matches the specified primary-key value.
	 */
	public Phase findByPrimaryKey(PhasePk pk) throws PhaseDaoException;

	/** 
	 * Returns all rows from the phase table that match the criteria 'name_Phase = :namePhase AND project_Code = :projectCode'.
	 */
	public Phase findByPrimaryKey(String namePhase, String projectCode) throws PhaseDaoException;

	/** 
	 * Returns all rows from the phase table that match the criteria ''.
	 */
	public Phase[] findAll() throws PhaseDaoException;

	/** 
	 * Returns all rows from the phase table that match the criteria 'project_Code = :projectCode'.
	 */
	public Phase[] findByProject(String projectCode) throws PhaseDaoException;

	/** 
	 * Returns all rows from the phase table that match the criteria 'name_Phase = :namePhase'.
	 */
	public Phase[] findWhereNamePhaseEquals(String namePhase) throws PhaseDaoException;

	/** 
	 * Returns all rows from the phase table that match the criteria 'state = :state'.
	 */
	public Phase[] findWhereStateEquals(short state) throws PhaseDaoException;

	/** 
	 * Returns all rows from the phase table that match the criteria 'project_Code = :projectCode'.
	 */
	public Phase[] findWhereProjectCodeEquals(String projectCode) throws PhaseDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the phase table that match the specified arbitrary SQL statement
	 */
	public Phase[] findByDynamicSelect(String sql, Object[] sqlParams) throws PhaseDaoException;

	/** 
	 * Returns all rows from the phase table that match the specified arbitrary SQL statement
	 */
	public Phase[] findByDynamicWhere(String sql, Object[] sqlParams) throws PhaseDaoException;

}
