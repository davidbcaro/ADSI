/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.model.dao.example;

import java.math.*;
import java.util.Date;
import java.util.Collection;
import co.edu.sena.model.dao.dao.AvailabilityDao;
import co.edu.sena.model.dao.dto.Availability;
import co.edu.sena.model.dao.exceptions.AvailabilityDaoException;
import co.edu.sena.model.dao.factory.AvailabilityDaoFactory;

public class AvailabilityDaoSample
{
	/**
	 * Method 'main'
	 * 
	 * @param arg
	 * @throws Exception
	 */
	public static void main(String[] arg) throws Exception
	{
		// Uncomment one of the lines below to test the generated code
		
		 findAll();
		// findByDay("");
		// findByTeacher("", "");
		// findByWorkingDay("");
		// findWhereStartTimeEquals(null);
		// findWhereEndTimeEquals(null);
		// findWhereInitialsWorkingDayEquals("");
		// findWhereIdDocumentEquals("");
		// findWhereDocumentNumberEquals("");
		// findWhereNameDayEquals("");
	}

	/**
	 * Method 'findAll'
	 * 
	 */
	public static void findAll()
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findAll();
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findByDay'
	 * 
	 * @param nameDay
	 */
	public static void findByDay(String nameDay)
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findByDay(nameDay);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findByTeacher'
	 * 
	 * @param idDocument
	 * @param documentNumber
	 */
	public static void findByTeacher(String idDocument, String documentNumber)
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findByTeacher(idDocument, documentNumber);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findByWorkingDay'
	 * 
	 * @param initialsWorkingDay
	 */
	public static void findByWorkingDay(String initialsWorkingDay)
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findByWorkingDay(initialsWorkingDay);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereStartTimeEquals'
	 * 
	 * @param startTime
	 */
	public static void findWhereStartTimeEquals(Date startTime)
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findWhereStartTimeEquals(startTime);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereEndTimeEquals'
	 * 
	 * @param endTime
	 */
	public static void findWhereEndTimeEquals(Date endTime)
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findWhereEndTimeEquals(endTime);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereInitialsWorkingDayEquals'
	 * 
	 * @param initialsWorkingDay
	 */
	public static void findWhereInitialsWorkingDayEquals(String initialsWorkingDay)
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findWhereInitialsWorkingDayEquals(initialsWorkingDay);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereIdDocumentEquals'
	 * 
	 * @param idDocument
	 */
	public static void findWhereIdDocumentEquals(String idDocument)
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findWhereIdDocumentEquals(idDocument);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereDocumentNumberEquals'
	 * 
	 * @param documentNumber
	 */
	public static void findWhereDocumentNumberEquals(String documentNumber)
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findWhereDocumentNumberEquals(documentNumber);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereNameDayEquals'
	 * 
	 * @param nameDay
	 */
	public static void findWhereNameDayEquals(String nameDay)
	{
		try {
			AvailabilityDao _dao = getAvailabilityDao();
			Availability _result[] = _dao.findWhereNameDayEquals(nameDay);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'getAvailabilityDao'
	 * 
	 * @return AvailabilityDao
	 */
	public static AvailabilityDao getAvailabilityDao()
	{
		return AvailabilityDaoFactory.create();
	}

	/**
	 * Method 'display'
	 * 
	 * @param dto
	 */
	public static void display(Availability dto)
	{
		StringBuffer buf = new StringBuffer();
		buf.append( dto.getStartTime() );
		buf.append( ", " );
		buf.append( dto.getEndTime() );
		buf.append( ", " );
		buf.append( dto.getInitialsWorkingDay() );
		buf.append( ", " );
		buf.append( dto.getIdDocument() );
		buf.append( ", " );
		buf.append( dto.getDocumentNumber() );
		buf.append( ", " );
		buf.append( dto.getNameDay() );
		System.out.println( buf.toString() );
	}

}
